<library>
    <class name="onmsMapControlWnd" extends="window">
        <tabslider name="mapControlTabSlider" width="${parent.width}" height="${parent.height-40}">
            <tabelement name="tabMapCtrls" text="Map Controls" selected="true">
                <simplelayout axis="y" spacing="4"/>
                <combobox name="mapChoice" width="${immediateparent.width-15}" shownitems="3" defaulttext="load a map..." editable="false">
                    <textlistitem datapath="mapRestService:/maps/map" text="$path{'name/text()'}" value="$path{'id/text()'}"/>
                </combobox>
                <button name="mapChoose" onclick="classroot.chooseMap()">Choose Map</button>
        
                <combobox name="nodeChoice" width="${immediateparent.width-15}" shownitems="3" defaulttext="add a node..." editable="false">
                    <textlistitem datapath="nodeRestService:/nodes/node" text="$path{'label/text()'}" value="$path{'nodeId/text()'}"/>
                </combobox>
                <button name="addNodeBtn" onclick="classroot.addNodeToMap()">Add To Map</button>
                <!-- <button name="mapProps" onclick="parent.activateMapProps()">Map Properties</button> -->
                <button name="saveMap" onclick="tmpMap.saveMap()">Save Map</button>
            </tabelement>
            <tabelement name="tabMapProperties" text="Map Properties">
                 <mapProperties name="tmpMapProps" width="${immediateparent.width-15}"/>
            </tabelement>
            <tabelement name="tabElementProperties" text="Element Properties">
                <text name="defaultElemPropsText" width="${immediateparent.width-15}">No map element has been selected.</text>
                <mapElementProperties name="tmpMapElemProps" visible="false"/>
            </tabelement>
            <tabelement text="About OpenNMS Maps">
                <text multiline="true" width="${immediateparent.width-15}">
                    Fabricate some lies in here about how awesome OpenNMS is. Work based on work by so-and-so and thank you to God for making this possible.
                </text>
            </tabelement>
        </tabslider>
            
        <handler name="oninit">
            Debug.write("Initializing map control window.");
            this.mapControlTabSlider.tabMapProperties.tmpMapProps.setAttribute("tgtOnmsMap", canvas.tmpMap);
        </handler>    

        <method name="addNodeToMap">
            var nodeId = this.mapControlTabSlider.tabMapCtrls.nodeChoice.value;
            if(nodeId != null) {
                Debug.write("Adding node: " + nodeId + " to map.");
                var dset = canvas.nodeRestService;
                // First set the filter to the node ID.
                dset.setOnmsNode(nodeId);
                dset.resetRestService();
                
                // Now we'll have to wait for the ondata to get called.
                Debug.write("Registering onnodeRestServiceStatus delegate.");
                this.nodeDel = new LzDelegate(this, "generateElement");
                this.nodeDel.register(canvas.nodeRestService, "onnodeRestServiceStatus");                          
            }
        </method>

        <method name="chooseMap">
            var mapId = this.mapControlTabSlider.tabMapCtrls.mapChoice.value;
            if(mapId != null) {
                Debug.write("chose map: '" + mapId + "'");

                var dset = canvas.mapRestService;
                // First set the filter to the map ID.
                dset.setOnmsMap(mapId);
                dset.resetRestService();

                // Now we'll have to wait for the ondata to get called.
                Debug.write("Registering onmapRestServiceStatus delegate.");
                this.del = new LzDelegate(this, "generateMap");
                this.del.register(canvas.mapRestService, "onmapRestServiceStatus");
            }
        </method>

        <method name="activateMapProps">
            Debug.write("Activating map properties window.");
            tmpMapProps.setAttribute("tgtOnmsMap", tmpMap);
            tmpMapProps.refreshWindow();
            tmpMapProps.setAttribute("visible",true);
        </method>

        <method name="generateMap" args="serviceStatus">
            var dset = canvas.mapRestService;

            // Next get a datapointer.
            var dp = dset.getPointer();

            if(serviceStatus == "fetched") {
                // Lets start the map generation process.
                Debug.write("Resetting the root map.");
                tmpMap.clearMap();
                
                // Skip the root node, which is the dataset.
                dp.selectChild();

                Debug.write("node name: " + dp.getNodeName());
                Debug.write("node count: " + dp.getNodeCount());

                // Go to the attribute nodes.
                dp.selectChild();

                while(dp.selectNext()) {
                    Debug.write("*** next child ***");


                    switch(dp.getNodeName()) {
                        case "id":
                            Debug.write("found id: " + dp.getNodeText());
                            break;
                        case "name":
                            Debug.write("found name: " + dp.getNodeText());
                            tmpMap.setAttribute("mapName", dp.getNodeText());
                            break;
                        case "lastModifiedTime":
                            Debug.write("found lastModifiedTime: " + dp.getNodeText());
                            tmpMap.setAttribute("lastModifiedTime", dp.getNodeText());
                            break;
                        case "userLastModifies":
                            Debug.write("found userLastModifies: " + dp.getNodeText());
                            break;
                        case "owner":
                            Debug.write("found owner: " + dp.getNodeText());
                            break;
                        case "accessMode":
                            Debug.write("found accessMode: " + dp.getNodeText());
                            tmpMap.setAttribute("accessMode", dp.getNodeText());
                            break;
                        case "background":
                            Debug.write("found background: " + dp.getNodeText());
                            tmpMap.setAttribute("mapBackground", "0x"+dp.getNodeText());
                            break;
                        case "createTime":
                            Debug.write("found createTime: " + dp.getNodeText());
                            tmpMap.setAttribute("createTime", dp.getNodeText());
                            break;
                        case "height":
                            Debug.write("found height: " + dp.getNodeText());
                            break;
                        case "width":
                            Debug.write("found width: " + dp.getNodeText());
                            break;
                        case "mapElements":
                            dp.selectChild();
                            var mapNode1 = new lz.onmsMapElement();
                            mapNode1.parentMap=tmpMap;
                            mapNode1.setMapElementLabel("node1");
                            mapNode1.setAttribute("mapElementIcon", "unspecified"); 
                            mapNode1.setAttribute("x", 250);
                            mapNode1.setAttribute("y", 100); 
                            while(dp.selectNext()) {
                                Debug.write("*** next child ***");
                                switch(dp.getNodeName()) { 
                                    case "x":
                                        mapNode1.setAttribute("x", dp.getNodeText());
                                        break;
                                    case "y":
                                        mapNode1.setAttribute("y", dp.getNodeText());
                                        break;
                                    case "iconName":
                                        mapNode1.setAttribute("mapElementIcon", dp.getNodeText());
                                        break;
                                    case "label":
                                        mapNode1.setMapElementLabel(dp.getNodeText());
                                        break;
                                    default: // id, mapElementId
                                        Debug.write("Unknown attribute: " + dp.getNodeName() + " found in mapElements.");                                        
                                }
                            }
                            tmpMap.addMapElement(mapNode1);
                            dp.selectParent();
                        default:
                            // we'll need to add scale, offsetX, offsetY and type.
                            // we can ignore the child "new"
                            Debug.write("node name: " + dp.getNodeName());
                            //Debug.write("node text: " + dp.getNodeText());
                    }
                }

                //dp.selectChild();
                //Debug.write("*** next child ***");
                //Debug.write("node name: " + dp.getNodeName());
                //Debug.write("node count: " + dp.getNodeCount());
                //Debug.write("map id: " + dp.getNodeAttribute("id"));

                
            }

            // Now unregister the delegate we created.
            Debug.write("Unregistering onmapRestServiceStatus delegate.");
            this.del.unregisterAll();


        </method>
        
        <method name="generateElement" args="serviceStatus">
            var dset = canvas.nodeRestService;

            // Next get a datapointer.
            var dp = dset.getPointer();
            
            if(serviceStatus == "fetched") {
                // Lets start the node element generation process.
                var mapNode1 = new lz.onmsMapElement();
                mapNode1.parentMap=tmpMap;
                mapNode1.setMapElementLabel("node1");
                mapNode1.setAttribute("mapElementIcon", "unspecified"); 
                mapNode1.setAttribute("x", 250);
                mapNode1.setAttribute("y", 100);
                
            
                // Skip the root node, which is the dataset.
                dp.selectChild();

                Debug.write("node name: " + dp.getNodeName());
                Debug.write("node count: " + dp.getNodeCount());

                // Go to the attribute nodes.
                dp.selectChild();

                while(dp.selectNext()) {
                    Debug.write("*** next child ***");

                    switch(dp.getNodeName()) {
                        case "label":
                            Debug.write("found label: " + dp.getNodeText());
                            mapNode1.setMapElementLabel(dp.getNodeText())
                            break;                        
                        default:
                            // we'll need to add scale, offsetX, offsetY and type.
                            // we can ignore the child "new"
                            Debug.write("node name: " + dp.getNodeName());
                            //Debug.write("node text: " + dp.getNodeText());
                    }
                }

                //dp.selectChild();
                //Debug.write("*** next child ***");
                //Debug.write("node name: " + dp.getNodeName());
                //Debug.write("node count: " + dp.getNodeCount());
                //Debug.write("map id: " + dp.getNodeAttribute("id"));
                
                tmpMap.addMapElement(mapNode1);
            }

            // Now unregister the delegate we created.
            Debug.write("Unregistering onmapRestServiceStatus delegate.");
            this.nodeDel.unregisterAll();


        </method>
    </class>
</library>
