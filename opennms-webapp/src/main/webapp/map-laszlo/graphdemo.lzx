<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE canvas SYSTEM "http://www.openlaszlo.org/lps4/tools/lzx.xsd">

<canvas title="OpenNMS Web Console - Maps">
    <splash/>

    <!-- OpenLaszlo Incubator Includes -->
    <include href="incubator/autocompletecombobox.lzx"/>
    <include href="incubator/tooltip/tooltip.lzx" />

    <!-- OpenNMS Mapping Resources (icons.) -->
    <include href="resources"/>

    <!-- OpenNMS Mapping Library -->
    <include href="library"/>

    <attribute name="linkCreateStatus"/>
    <attribute name="linkRootNode"/>

    <onmsMap name="tmpMap"/>
    <onmsMapLoader name="tmpMapLoader"/>
    <mapProperties name="tmpMapProps" resizable="true" width="300" height="200" title="Map Properties"/>
    
    <!-- This is the controls window for manipulating maps. -->
    <onmsMapControlWnd name="mapControls" resizable="true" width="300" height="200" title="Map Controls" x="${parent.width-300}">
    </onmsMapControlWnd>
    
    <!-- Hopefully in the future you can ignore this. I just pre-create canned nodes and links here.
         My plan is that this will be accomplished by either mapControls oronmsMapLoader.
      -->
    <handler name="oninit">
        Debug.write("starting graph demo application.");

        // Turn off windows we don't want to see by default.
        tmpMapProps.setAttribute("visible", false);

        // Reset global node linking status.
        this.setAttribute("linkCreateStatus", "off");
        this.setAttribute("linkRootNode", 0);

        // Create a base node.
        var mapNode1 = new lz.onmsMapElement();
        mapNode1.parentMap=tmpMap;
        mapNode1.setMapElementLabel("node1");
        mapNode1.setAttribute("nodeId", 1);
        mapNode1.setAttribute("x", 250);
        mapNode1.setAttribute("y", 100);
        tmpMap.addMapElement(mapNode1);
        
        // Create a new node. (node 2)
        var mapNode2 = new lz.onmsMapElement();
        mapNode2.parentMap=tmpMap;
        mapNode2.setMapElementLabel("node2");
        mapNode2.setAttribute("nodeId", 2);
        mapNode2.setAttribute("x", 100);
        mapNode2.setAttribute("y", 200);
        tmpMap.addMapElement(mapNode2);
        
        // Create a link between this (node 2) and the base node (node 1).
        var mapLink1 = new lz.onmsDataLink();
        mapLink1.connectNodes(mapNode1, mapNode2);
        tmpMap.addDataLink(mapLink1);
        
        // Create a new node. (node 3)
        var mapNode3 = new lz.onmsMapElement();
        mapNode3.parentMap=tmpMap;
        mapNode3.setMapElementLabel("node3");
        mapNode3.setAttribute("nodeId", 3);
        mapNode3.setAttribute("x", 200);
        mapNode3.setAttribute("y", 200);
        tmpMap.addMapElement(mapNode3);
        
        // Create a link between this (node 3) and the base node (node 1).
        var mapLink2 = new lz.onmsDataLink();
        mapLink2.connectNodes(mapNode1, mapNode3);
        tmpMap.addDataLink(mapLink2);
        
        // Create a new node. (node 4)
        var mapNode4 = new lz.onmsMapElement();
        mapNode4.parentMap=tmpMap;
        mapNode4.setMapElementLabel("node4");
        mapNode4.setAttribute("nodeId", 4);
        mapNode4.setAttribute("x", 300);
        mapNode4.setAttribute("y", 200);
        tmpMap.addMapElement(mapNode4);
        
        // Create a link between this (node 4) and the base node (node 1).
        var mapLink3 = new lz.onmsDataLink();
        mapLink3.connectNodes(mapNode1, mapNode4);
        tmpMap.addDataLink(mapLink3);
        
        // Create a new node. (node 5)
        var mapNode5 = new lz.onmsMapElement();
        mapNode5.parentMap=tmpMap;
        mapNode5.setMapElementLabel("node5");
        mapNode5.setAttribute("nodeId", 5);
        mapNode5.setAttribute("x", 400);
        mapNode5.setAttribute("y", 200);
        tmpMap.addMapElement(mapNode5);
        
        // Create a link between this (node 5) and the base node (node 1).
        var mapLink4 = new lz.onmsDataLink();
        mapLink4.connectNodes(mapNode1, mapNode5);
        tmpMap.addDataLink(mapLink4);
        
        // Create a link between this (node 5) and the another node (node 4).
        //var mapLink5 = new lz.onmsDataLink();
        //mapLink5.connectNodes(mapNode4, mapNode5);
        //tmpMap.addDataLink(mapLink5);
        
        tmpMap.mapRefresh();
        
        mapControls.bringToFront();
        
        var tmpMapObj = tmpMapLoader.getMapList();
        
    </handler>
</canvas>
