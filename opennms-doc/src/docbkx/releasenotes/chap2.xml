<?xml version="1.0" encoding="UTF-8"?>
<chapter id="chap2">
  <title>What's New?</title>

  <subtitle>Changes in This OpenNMS</subtitle>

  <section>
    <title>Changes in OpenNMS 1.5.94</title>

    <section>
      <title>New Features</title>

      <itemizedlist>
        <listitem>
          <para>OpenNMS now has provisional support for PostgreSQL 8.3.  All known bugs
          have been fixed, but there may be some corner cases left that aren't covered by
          unit tests.  To use OpenNMS with PostgreSQL 8.3, you will need to run the install
          tool with the "-Q" option. (Bug <ulink
          url="http://bugzilla.opennms.org/show_bug.cgi?id=2613">#2613</ulink>)</para>
        </listitem>
        
        <listitem>
          <para>OpenNMS now automatically writes a thread dump to output.log on
          shutdown, for easier debugging. (Bug <ulink
          url="http://bugzilla.opennms.org/show_bug.cgi?id=2181">#2181</ulink>)</para>
        </listitem>
        
        <listitem>
          <para>SNMP parameters can now be set in the Collectd configuration. (Bug <ulink
          url="http://bugzilla.opennms.org/show_bug.cgi?id=2195">#2195</ulink>)</para>
        </listitem>
        
        <listitem>
          <para>Relative thresholds can now use negative numbers.  Additionally, you can
          now threshold on absolute changes as well (loss in dB on fiber links, etc.) (Bugs
          <ulink
          url="http://bugzilla.opennms.org/show_bug.cgi?id=2275">#2275</ulink> and
          <ulink
          url="http://bugzilla.opennms.org/show_bug.cgi?id=2604">#2604</ulink>)</para>
        </listitem>
        
        <listitem>
          <para>XmlRpcNotifier now allows a timeout parameter. (Bug <ulink
          url="http://bugzilla.opennms.org/show_bug.cgi?id=2342">#2342</ulink>)</para>
        </listitem>
        
        <listitem>
          <para>The java web start remote poller can now be run in a headless mode.
          See <ulink url="http://www.opennms.org/index.php/Remote_Poller">this page</ulink>
          for configuration details. (Bug <ulink
          url="http://bugzilla.opennms.org/show_bug.cgi?id=2354">#2354</ulink>)</para>
        </listitem>
        
        <listitem>
          <para>Asset comments now retain formatting.  In addition, the exporter creates
          real CSV files, so you can have asset data with commas in them. ;) (Bug <ulink
          url="http://bugzilla.opennms.org/show_bug.cgi?id=2363">#2363</ulink>)</para>
        </listitem>

        <listitem>
	      <para>The OSS/J QoS interface has been enhanced in a number of ways, mostly
	      related to documentation and simplifying importing.  See <ulink
	      url="http://bugzilla.opennms.org/show_bug.cgi?id=2618">bug #2618</ulink>
	      for details.</para>
	    </listitem>
	    
	    <listitem>
	      <para>A new ticketing plugin for <ulink
	      url="http://otrs.org/">OTRS</ulink> has been added.  (Bug <ulink
	      url="http://bugzilla.opennms.org/show_bug.cgi?id=2658">#2658</ulink>)</para>
	    </listitem>
	    
	    <listitem>
	      <para>Initial support was added for interfacing with devices that speak
         Transactional Language 1, or TL-1.  (Bug <ulink
	      url="http://bugzilla.opennms.org/show_bug.cgi?id=2693">#2693</ulink>)</para>
	    </listitem>

	    <listitem>
	      <para>The HTTP Collector can now substitute IP addresses in URLs it's
	      collecting from  (Bug <ulink
	      url="http://bugzilla.opennms.org/show_bug.cgi?id=2590">#2590</ulink>)</para>
	    </listitem>

        <listitem>	
	      <para>Support for new Aedilis, Cisco, Citrix, Compaq, McAfee, Polycom,
	      Radlan, and UPS-MIB traps (Bugs <ulink
	      url="http://bugzilla.opennms.org/show_bug.cgi?id=2511">#2511</ulink>,
	      <ulink
	      url="http://bugzilla.opennms.org/show_bug.cgi?id=2542">#2542</ulink>,
	      <ulink
	      url="http://bugzilla.opennms.org/show_bug.cgi?id=2554">#2554</ulink>,
	      <ulink
	      url="http://bugzilla.opennms.org/show_bug.cgi?id=2566">#2566</ulink>,
	      <ulink
	      url="http://bugzilla.opennms.org/show_bug.cgi?id=2581">#2581</ulink>,
	      <ulink
	      url="http://bugzilla.opennms.org/show_bug.cgi?id=2598">#2598</ulink>,
	      <ulink
	      url="http://bugzilla.opennms.org/show_bug.cgi?id=2599">#2599</ulink>,
	      <ulink
	      url="http://bugzilla.opennms.org/show_bug.cgi?id=2643">#2643</ulink>,
	      <ulink
	      url="http://bugzilla.opennms.org/show_bug.cgi?id=2671">#2671</ulink>,
	      and <ulink
	      url="http://bugzilla.opennms.org/show_bug.cgi?id=2722">#2722</ulink>)</para>
	    </listitem>
	    
	    <listitem>
	      <para>Support for new Brocade, Citrix, Dell, Fortinet, HP-UX, Kyocera,
	      Liebert, Novell, and SNMP Informant data collections (Bugs <ulink
	      url="http://bugzilla.opennms.org/show_bug.cgi?id=2370">#2370</ulink>,
	      <ulink
	      url="http://bugzilla.opennms.org/show_bug.cgi?id=2371">#2371</ulink>,
	      <ulink
	      url="http://bugzilla.opennms.org/show_bug.cgi?id=2391">#2391</ulink>,
	      <ulink
	      url="http://bugzilla.opennms.org/show_bug.cgi?id=2511">#2511</ulink>,
	      <ulink
	      url="http://bugzilla.opennms.org/show_bug.cgi?id=2579">#2579</ulink>,
	      <ulink
	      url="http://bugzilla.opennms.org/show_bug.cgi?id=2624">#2624</ulink>,
	      <ulink
	      url="http://bugzilla.opennms.org/show_bug.cgi?id=2629">#2629</ulink>,
	      <ulink
          url="http://bugzilla.opennms.org/show_bug.cgi?id=2663">#2663</ulink>,
          <ulink
          url="http://bugzilla.opennms.org/show_bug.cgi?id=2686">#2686</ulink>,
          and <ulink
          url="http://bugzilla.opennms.org/show_bug.cgi?id=2700">#2700</ulink>)</para>
        </listitem>
      </itemizedlist>

    </section>

    <section>
      <title>Bug Fixes</title>

      <para>A rare but insidious bug in the poller that caused some outages to not
      be properly resolved was fixed.  (Bug
      <ulink url="http://bugzilla.opennms.org/show_bug.cgi?id=2702">#2702</ulink>)
      </para>
      
      <para>A large number of other bugs have been fixed since 1.5.93, in the process
      of preparing for 1.6.0.  A full list of bugs fixed in the release can be
      found in <ulink url="http://bugzilla.opennms.org/buglist.cgi?query_format=advanced&amp;target_milestone=1.5.94+%281.6+beta+5%29&amp;bug_status=VERIFIED&amp;cmdtype=doit">bugzilla</ulink>.</para>

      <para>A number of cross-site scripting (XSS) security issues have been fixed.  (Bugs
      <ulink url="http://bugzilla.opennms.org/show_bug.cgi?id=2631">#2631</ulink>,
      <ulink url="http://bugzilla.opennms.org/show_bug.cgi?id=2633">#2633</ulink>,
      and <ulink url="http://bugzilla.opennms.org/show_bug.cgi?id=2634">#2634</ulink>)
      </para>

    </section>

    <section>
    
      <title>Changes</title>

      <para>In the plugins for capsd and the monitors for the service poller,
      the correct parameter to use for retries is "retry" however some used
      "retries". This has been corrected, but on upgrading one may want to
      change the configuration files if they have been customized. Those
      changed were:</para>

      <itemizedlist>
        <listitem>
          <para>service poller monitors:</para>

          <itemizedlist>
            <listitem>
              <para>SNMP Monitor</para>
            </listitem>
          </itemizedlist>

          <itemizedlist>
            <listitem>
              <para>OMSA Storage Monitor</para>
            </listitem>
          </itemizedlist>

          <itemizedlist>
            <listitem>
              <para>PERC Monitor</para>
            </listitem>
          </itemizedlist>

          <itemizedlist>
            <listitem>
              <para>Disk Usage Monitor</para>
            </listitem>
          </itemizedlist>
        </listitem>
      </itemizedlist>

      <itemizedlist>
        <listitem>
          <para>capsd plugins:</para>

          <itemizedlist>
            <listitem>
              <para>NTP Plugin</para>
            </listitem>
          </itemizedlist>

          <itemizedlist>
            <listitem>
              <para>DNS Plugin</para>
            </listitem>
          </itemizedlist>
        </listitem>
      </itemizedlist>

      <para>The default RRD roll-up schedule for data collected using the
      NSClient Collector has been changed to match that used for some time by
      the SNMP Collector. When upgrading to release 1.5.94, users who rely on
      NSClient data collection and do not wish to lose any historical data must
      take care to preserve the existing roll-up schedule in the
      nsclient-datacollection-config.xml file. Users who are not concerned with
      keeping historical NSClient performance data can adopt the new roll-up
      schedule, but will need to delete all RRD files created while the old
      roll-up schedule was in effect. Failure to do so will result in new data
      not being stored.</para>

    </section>
    
  </section>

  <section>
    <title>Changes in OpenNMS 1.5.93</title>

    <section>
      <title>New Features</title>

      <para>This is a quick bugfix release, no new feature were added.</para>
    </section>

    <section>
      <title>Bug Fixes</title>

      <para>This release is intended primarily to solve an issue in SNMP4J
      which could cause performance issues from excessive logging in some
      situations. (Bug <ulink
      url="http://bugzilla.opennms.org/show_bug.cgi?id=2552">#2552</ulink>)</para>

      <para>In addition, the installer was updated to not force a specific
      amount of memory when run, so it should work with large databases
      without the need to edit the upgrade script.</para>
    </section>
  </section>

  <section>
    <title>Changes in OpenNMS 1.5.92</title>

    <section>
      <title>New Features</title>

      <para>Xmlrpcd has been improved to allow multicasting events as well as
      a few other changes. (Bug <ulink
      url="http://bugzilla.opennms.org/show_bug.cgi?id=1487">#1487</ulink>)</para>

      <para>Support for logging logins, failed login attempts, logouts, and
      session timeouts was added. (Bug <ulink
      url="http://bugzilla.opennms.org/show_bug.cgi?id=1580">#1580</ulink>)</para>

      <para>Support for new Juniper, Cisco, Sonus, and VMware traps (Bugs
      <ulink
      url="http://bugzilla.opennms.org/show_bug.cgi?id=2368">#2368</ulink>,
      <ulink
      url="http://bugzilla.opennms.org/show_bug.cgi?id=2487">#2487</ulink>,
      <ulink
      url="http://bugzilla.opennms.org/show_bug.cgi?id=2500">#2500</ulink>,
      <ulink
      url="http://bugzilla.opennms.org/show_bug.cgi?id=2502">#2502</ulink>,
      and <ulink
      url="http://bugzilla.opennms.org/show_bug.cgi?id=2540">#2540</ulink>)</para>

      <para>Support for new Asterisk, Juniper, Cisco, Windows, Mikrotik, and
      UCD data collections (Bugs <ulink
      url="http://bugzilla.opennms.org/show_bug.cgi?id=2356">#2356</ulink>,
      <ulink
      url="http://bugzilla.opennms.org/show_bug.cgi?id=2367">#2367</ulink>,
      <ulink
      url="http://bugzilla.opennms.org/show_bug.cgi?id=2384">#2384</ulink>,
      <ulink
      url="http://bugzilla.opennms.org/show_bug.cgi?id=2387">#2387</ulink>,
      <ulink
      url="http://bugzilla.opennms.org/show_bug.cgi?id=2390">#2390</ulink>,
      <ulink
      url="http://bugzilla.opennms.org/show_bug.cgi?id=2420">#2420</ulink>,
      <ulink
      url="http://bugzilla.opennms.org/show_bug.cgi?id=2477">#2477</ulink>,
      <ulink
      url="http://bugzilla.opennms.org/show_bug.cgi?id=2483">#2483</ulink>,
      and <ulink
      url="http://bugzilla.opennms.org/show_bug.cgi?id=2529">#2529</ulink>)</para>

      <para>There is a new parameter that can be used to extract asset
      information for use in events and notices. The parameter
      %asset[fieldname]% will look up the field in the assets table
      represented by "fieldname" for the nodeid in the event. For example:
      %asset[description]% will return the description field. If a field is
      empty or not available it will return "Unknown". (Bug <ulink
      url="http://bugzilla.opennms.org/show_bug.cgi?id=2465">#2465</ulink>)</para>
    </section>

    <section>
      <title>Bug Fixes</title>

      <para>A full list of bugs fixed in the release can be found in <ulink
      url="http://bugzilla.opennms.org/buglist.cgi?query_format=advanced&amp;target_milestone=1.5.92+%281.6+beta+3%29&amp;bug_status=VERIFIED&amp;cmdtype=doit">bugzilla</ulink>.</para>
    </section>
  </section>

  <section>
    <title>Changes in OpenNMS 1.5.91</title>

    <section>
      <title>New Features</title>

      <para>The scheduled outage web UI improvements that were partially
      implemented in 1.5.91 are finished. You can now create daily scheduled
      outages.</para>

      <para>OpenNMS XML configuration files will now be validated if xmllint
      is available at startup.</para>
    </section>

    <section>
      <title>Bug Fixes</title>

      <para>A number of exceptions and other code errors have been
      fixed.</para>

      <para>A few issues relating to thresholding and data collection have
      been resolved.</para>

      <para>A full list of bugs fixed in the release can be found in <ulink
      url="http://bugzilla.opennms.org/buglist.cgi?query_format=advanced&amp;target_milestone=1.5.91+%281.6+beta+2%29&amp;bug_status=VERIFIED&amp;cmdtype=doit">bugzilla</ulink>.</para>
    </section>
  </section>

  <section>
    <title>Changes in OpenNMS 1.5.90</title>

    <section>
      <title>Bug Fixes</title>

      <para>NSClient and HTTP collections used to need a "nsclient-collection"
      and "http-collection" parameter (respectively) in
      collectd-configuration.xml. This is now supported, but deprecated, and
      the name changed to "collection", as is the case for SNMP
      collection.</para>

      <para>Data collection from systems supporting the UCD-SNMP SYSSTAT MIB
      group now includes the raw counters for context and interrupts. The
      deprecated one-minute gauge versions of these metrics are still
      collected if the agent provides them, but their resource graphs are no
      longer in the default list.</para>

      <para>A full list of bugs fixed in the release can be found in <ulink
      url="http://bugzilla.opennms.org/showdependencytree.cgi?id=2237&amp;hide_resolved=0">bugzilla</ulink>.
      There were over 70 of them.</para>

      <para>In addition, a number of new event definitions were added. Note
      that the UEIs for Foundry Networks now all read "foundry" whereas before
      some read "foundry" and others read "FoundryNetworks". This will affect
      any notifications based on those UEIs.</para>
    </section>
  </section>

  <section>
    <title>Changes in OpenNMS 1.3.11</title>

    <section>
      <title>New Features</title>

      <para>There are no new features in 1.3.11, but there was one that was
      left out of the description for 1.3.10 that should be mentioned.</para>

      <para>The <ulink
      url="http://www.opennms.org/index.php/Mail_Transport_Monitor">Mail
      Transport Monitor</ulink> tests a mail server by actually sending an
      e-mail and checking that it was received. This can be a very useful for
      measuring the response time of mail systems.</para>
    </section>

    <section>
      <title>Bug Fixes</title>

      <para>A lot of changes were made under the covers to the eventd process
      in 1.3.10. One of those changes broke events from interfaces with an IP
      address that exists on more than one node. While not a problem that the
      average person is likely to encounter, it was enough of an issue to
      warrant a fix.</para>
    </section>
  </section>

  <section>
    <title>Changes in OpenNMS 1.3.10</title>

    <section>
      <title>New Features</title>

      <para>OpenNMS now supports an integration with the <ulink
      url="http://www.hyperic.com/products/hq_oss.html">Hyperic HQ</ulink>
      agent. There is a detailed <ulink
      url="http://www.opennms.org/images/a/a4/Hyperic-integration2.pdf">white
      paper</ulink> available that describes the necessary configuration
      changes.</para>

      <para>The classes used to discover and poll NRPE (Nagios Remote Plugin
      Execution) checks from OpenNMS now support the <ulink
      url="http://www.opennms.org/index.php/NRPE_SSL_Support">NRPE protocol
      over secure sockets layer (SSL)</ulink>. Since both the official NRPE
      addon from Nagios and the NRPE listener of NSClient++ use SSL by
      default, the new default in OpenNMS is to use SSL for NRPE.</para>

      <para>OpenNMS now supports <ulink
      url="http://www.opennms.org/index.php/How_to_monitor_windows_services?">discovery
      and monitoring of Windows services</ulink> (even those that do not
      provide network services, such as the Task Scheduler) via the SNMP
      service that ships with Windows.</para>

      <para><ulink
      url="http://www.opennms.org/index.php/Thresholding#Merge_into_collectd">Thresholding</ulink>
      has been (optionally) moved into the collection daemon. Changes to your
      configuration is required to use this new code, but once done,
      thresholds are calculated on data as it is collected. This is
      significantly more efficient (data is not read back from the RRD/JRB
      files on disk), and also removes the need for the "range"
      parameter.</para>

      <para>It is now possible to relocate the /var/opennms and
      /var/log/opennms when installing the RPMs, using the "--relocate" option
      to RPM.</para>
    </section>

    <section>
      <title>Bug Fixes</title>

      <para>A large number of bugs were addressed in this release. Bugzilla
      contains <ulink
      url="http://bugzilla.opennms.org/showdependencytree.cgi?id=2108">the
      complete list</ulink>. Also, a large number of changes were made under
      the covers to such processes as eventd.</para>
    </section>
  </section>

  <section>
    <title>Changes in OpenNMS 1.3.9</title>

    <section>
      <title>New Features</title>

      <para>There are a couple of new features in this release:</para>

      <itemizedlist>
        <listitem>
          <para>There is now a way to add and delete groups through the
          webUI.</para>
        </listitem>

        <listitem>
          <para>Users can change their password by clicking on their username
          in the web page header.</para>
        </listitem>

        <listitem>
          <para>Added event definitions for Oracle and ISS events.</para>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title>Bug Fixes</title>

      <para>In certain cases the number of allowed database connections could
      be completely exhausted, causing discovery and notifications to stop
      working. This has been corrected.</para>
    </section>
  </section>

  <section>
    <title>Changes in OpenNMS 1.3.8</title>

    <section>
      <title>New Features</title>

      <para>There are a number of new features in this release:</para>

      <itemizedlist>
        <listitem>
          <para>RSS Feeds now exist for outages, alarms and
          notifications.</para>
        </listitem>

        <listitem>
          <para>Outage duration is shown in the outage list.</para>
        </listitem>

        <listitem>
          <para>KSC Reports now allow for the number of graphs per line to be
          specified per report.</para>
        </listitem>

        <listitem>
          <para>A new SSH monitor has been created to improve on the old one
          based on the TCP monitor.</para>
        </listitem>

        <listitem>
          <para>Added a "strict timeout" option to monitors to enable
          connection errors to be retried aftet the timeout expires versus
          immediately.</para>
        </listitem>
      </itemizedlist>

      <para>In order to use the "strict timeout" option, simply add it as a
      parameter to your monitor config in poller-configuration.xml:</para>

      <para><programlisting>                &lt;service name="SMTP" interval="300000" user-defined="false" status="on"&gt;
                        &lt;parameter key="retry" value="1"/&gt;
                        &lt;parameter key="timeout" value="3000"/&gt;
                        &lt;parameter key="strict-timeout" value="true"/&gt;
                        &lt;parameter key="port" value="25"/&gt;
                        &lt;parameter key="rrd-repository" value="/opt/opennms/share/rrd/response"/&gt;
                        &lt;parameter key="rrd-base-name" value="smtp"/&gt;
                        &lt;parameter key="ds-name" value="smtp"/&gt;
                &lt;/service&gt;</programlisting></para>

      <para>Probably the biggest new feature is the ability to run on Windows.
      We are testing an installer now and will be releasing it soon.</para>
    </section>

    <section>
      <title>Bug Fixes</title>

      <para>As OpenNMS moves closer to the next stable release, the number of
      features will decrease as bug fixes increase. This release is no
      different, with <ulink
      url="http://bugzilla.opennms.org/showdependencytree.cgi?id=2043">lots of
      bugs</ulink> corrected in this version.</para>
    </section>
  </section>

  <section>
    <title>Changes in OpenNMS 1.3.7</title>

    <section>
      <title>New Features</title>

      <para><emphasis>Jetty used instead of Tomcat</emphasis>: OpenNMS now
      runs with its own servlet container using jetty. The default OpenNMS
      port has been moved from 8080 to 8980. Tomcat is not required but can
      still be used if desired.</para>

      <para><emphasis>StrafePing</emphasis>: Based on Tobi Oeticker's <ulink
      url="http://oss.oetiker.ch/smokeping/">SmokePing</ulink>, this new
      monitor will report on ping latency in a nifty new graph. It will send
      out 20 pings every five minutes by default. The monitor can be
      configured to alert on any number of missed pings as well.</para>

      <para><emphasis>New Zoom</emphasis>: The zoom code borrowed from Cacti
      had issues with offsets. The zoom code from SmokePing was brought in to
      replace it. Now all the offsets work well except for Internet Explorer.
      This should be corrected for IE in the next release.</para>

      <para><emphasis>Jira Plugin</emphasis>: Thanks to Johan, there is now a
      Jira trouble ticket plugin to go with the one for <ulink
      url="http://www.opennms.org/index.php/CentricCRM_Trouble_Ticket_Plugin">CentricCRM</ulink>.</para>
    </section>

    <section>
      <title>Bug Fixes</title>

      <para><emphasis>Performance</emphasis>: Data collection performance has
      been greatly improved. On one site OpenNMS was able to collect on 15
      variables from 126,000 interfaces on 4467 devices in less than a minute
      with 150 collection threads. Storing this information was a different
      matter, since it really depends on the performance of the disk
      subsystem. OpenNMS will queue the data to be written, so while no data
      is lost it may take some time before a particular file to be updated. In
      the past this resulted in OpenNMS being "behind" - i.e. the last update
      shown on a graph could be several polling cycles old. Since, in the
      above example, only a few of those 126K interfaces would be viewed at
      any one time, new promotion code was added to the webUI that will update
      a file with pending data before it is displayed, thus removing that
      shortcoming. Also, with the removal of Tomcat as a requirement, the
      whole application runs in one VM. This, along with some code changes,
      will show a marked speed improvement in the webUI.</para>

      <para>The complete list of bug fixes in this release can be found in
      <ulink
      url="http://bugzilla.opennms.org/showdependencytree.cgi?id=1918">bugzilla</ulink>.</para>
    </section>

    <section>
      <title>New Install Methods</title>

      <para>With the removal of the JNI code in release 1.3.6, this has
      enabled the creation of yum and apt repositories for a number of
      operating systems (including a nightly snapshot for the brave). There is
      a <ulink
      url="http://www.opennms.org/index.php/QuickStart">Quickstart</ulink>
      page on the wiki describing these new methods for managaing OpenNMS
      packages and upgrades.</para>
    </section>
  </section>

  <section>
    <title>Changes in OpenNMS 1.3.6</title>

    <para>OpenNMS 1.3.6 is the next step in the accelerating release schedule
    toward OpenNMS 2.0. This release is being tagged just before the annual
    Dev-Jam developer's conference to provide a good launch point for the
    development that will happen this week.</para>

    <section>
      <title>New Features</title>

      <para>There is a new Data Export feature that will export performance
      data stored in the "RRD" files to an XML file that can be used by other
      application (currently only available if you are using JRobin to store
      the data). This feature is accessed by going to a particular URL
      (/opennms/summary/results.htm) and passing four parameters: filterRule:
      a filter rule This is any filter that normally works in OpenNMS, such as
      "ipaddr iplike *.*.*.*" (although I'd worry about using that one with a
      open attributeSieve). startTime (in seconds since epoch) i.e. this is in
      "timeticks" or the value returned with "date %+s" endTime (in seconds
      since epoch) ditto "timeticks" attributeSieve=a regexp that can be
      passed to String.match() to match the attribute name Thus ".*" would
      return all values from all RRDs for the nodes that match the filter
      above. Here's an example using wget:</para>

      <para><programlisting>wget --http-user=admin --http-passwd=admin -O summary.xml \
 'http://172.16.8.100:8180/opennms/summary/results.htm?filterRule=ipaddr+iplike+10.136.123.1&amp;startTime=1184173183&amp;endTime=1185219010&amp;attributeSieve=.*'</programlisting>
      This will return the summary.xml file for all of the variables being
      collected for the node that contains 10.136.123.1. Here's one for
      ifInOctets and ifOutOctets for the whole system:</para>

      <para><programlisting>wget --http-user=tarus.balog --http-passwd=secret -O summary.xml \
'http://172.16.8.100:8180/opennms/summary/results.htm?filterRule=ipaddr+iplike+*.*.*.*&amp;startTime=1184173183&amp;endTime=1185219010&amp;attributeSieve=(ifInOctets|ifOutOctets)'</programlisting></para>

      <para>Speaking of JRobin, some changes have been made to make the graphs
      prettier (thanks to Will Fraley).</para>
    </section>

    <section>
      <title>Bug Fixes</title>

      <para>The data collection code has been tweaked yet again to improve
      performance.</para>
    </section>

    <section>
      <title>JNI Code Removal</title>

      <para>This release is the first OpenNMS without any JNI code in the
      OpenNMS application or webapp. Previously, OpenNMS needed to be compiled
      on each platform due to slight differences in libraries for the C code
      used to implement iplike (the PostgreSQL function for parsing IP
      addresses), jrrd (the code to integrate OpenNMS with RRDTool) and jicmp
      (the code that let's OpenNMS send pings). Thus these functions must be
      installed separately. While OpenNMS will work without jrrd (it will use
      JRobin to store data), the iplike function should be installed for
      performance reasons (a pg_sql version will be used if iplike is not
      available), and jicmp is pretty much required.</para>

      <para>There are a number of ways to get these functions installed. On
      Sourceforge there are RPMs for many distros and as well as a source
      tarball. The source tarball can be installed using the usual "configure;
      make; make install" method used for most C code. If the operating system
      supports RPMs, then "rpmbuild -tb [tarball]" will create a binary RPM if
      it is not already available.</para>

      <para>In order to make OpenNMS aware of where the code is located, a new
      option has been added to the installer: -l</para>

      <para>Since the default location for these files is "/usr/local/lib"
      this installer would be run similar to:</para>

      <para><programlisting>/opt/opennms/bin/install -l /usr/local/lib -dis</programlisting></para>
    </section>
  </section>

  <section>
    <title>Changes in OpenNMS 1.3.5</title>

    <section>
      <title>New Features</title>

      <para>There are no new features in 1.3.5.</para>
    </section>

    <section>
      <title>Bug Fixes</title>

      <para>The reason for this release is a bug involving notifications. Due
      to the move toward database independence some code was introduced that
      caused notifications on events with a serviceid of null (such as those
      from traps) to fail. The original problem was misdiagnosed and the
      attempt to fix it, version 1.3.4, made the problem worse. It has been
      correctly resolved in this release. In addition, some major changes were
      made to the way OpenNMS data collection is started in order to use a
      smaller memory footprint and provide better performance.</para>
    </section>
  </section>

  <section>
    <title>Changes in OpenNMS 1.3.4</title>

    <section>
      <title>New Features</title>

      <para>The only new feature is the abilty to invert the result of a
      monitor. By adding the parameter "invert-status" to a monitor, up
      becomes down, and down becomes up. Useful for monitoring things, like an
      ISDN link, that indicate a problem when they are available. This was
      available for ICMP in 1.2.x, but it has now been ported to deal with all
      monitors.</para>

      <para>An example of how to use this is as follows. Suppose there are a
      number of IP addresses on the network that represent ISDN backup lines.
      Thus a successful "ping" to those IPs means that there is a problem with
      the network. In other words, up is down.</para>

      <para>First, there needs to be a service in
      <filename>capsd-configuraion.xml</filename> that defines the "not" ICMP
      service:</para>

      <para><programlisting>    &lt;protocol-plugin protocol="NotICMP" class-name="org.opennms.netmgt.capsd.plugins.IcmpPlugin" scan="off" user-defined="false"&gt;
        &lt;property key="timeout" value="2000" /&gt;
        &lt;property key="retry" value="1" /&gt;
    &lt;/protocol-plugin&gt;</programlisting></para>

      <para>Note that the scan for this service is "off". There are a number
      of ways to add services to IP addresses, but an easy one is to use the
      <filename>send-event.pl</filename> script to send an event to add the
      service directly:</para>

      <para><programlisting>send-event.pl uei.opennms.org/internal/capsd/updateService localhost \
 --interface 172.20.1.12 \
 --service NotICMP \
 --parm 'nodelabel kenny.opennms.com' \
 --parm 'action ADD'</programlisting></para>

      <para>This will add the NotICMP service to the node "kenny.opennms.com"
      on interface "172.20.1.12". Repeat for all other ISDN links.</para>

      <para>Finally the poller has to be told to poll this service. Edit
      poller-configuration.xml and add:</para>

      <programlisting>                &lt;service name="NotICMP" interval="300000" user-defined="false" status="on"&gt;
                        &lt;parameter key="invert-status" value="true"/&gt;
                        &lt;parameter key="retry" value="2"/&gt;
                        &lt;parameter key="timeout" value="3000"/&gt;
                        &lt;parameter key="rrd-repository" value="/opt/opennms/share/rrd/response"/&gt;
                        &lt;parameter key="ds-name" value="noticmp"/&gt;
                &lt;/service&gt;</programlisting>

      <para>and remember to put the monitor at the bottom:</para>

      <para><programlisting>        &lt;monitor service="NotICMP"      class-name="org.opennms.netmgt.poller.monitors.IcmpMonitor"/&gt;</programlisting></para>

      <para>The key here is the "invert-status" property. This should work
      with every monitor in the application.</para>
    </section>

    <section>
      <title>Bug Fixes</title>

      <para>The reason for this release is a bug involving notificiations. In
      1.3.3 the ability to match on severities was introduced. For example,
      you could send a notice on any even that was "Critical". Unfortunately,
      there was an unfortunately long "if" statement that got pooched when
      this feature was added. It blocked notifications based on traps. In
      addition, there was a bug with packages with just &lt;specific&gt; tags
      (no include-range tags) passing all IP addresses that has been
      addressed.</para>
    </section>
  </section>

  <section>
    <title>Changes in OpenNMS 1.3.3</title>

    <section>
      <title>New Features</title>

      <para>In an attempt to get the release out as fast as possible, we've
      decided to track new features on the OpenNMS wiki:</para>

      <para><ulink
      url="http://opennms.org/index.php/OpenNMS_1.3#New_Features">http://opennms.org/index.php/OpenNMS_1.3#New_Features</ulink></para>

      <para>However, there are two main "gotches" of which to be aware.</para>

      <para>The first is that the default RRD file storage has changed. If you
      want to use the new format, you will need to delete your old RRD/JRobin
      data. OpenNMS was storage an incredibly large amount of data, especially
      compared to projects like MRTG. It will now store "as polled" 5 minute
      samples for a week, hourly samples for two months and daily MIN, MAX and
      AVERAGE for a year. This reduces the size of the RRD files by more than
      80%.</para>

      <para>The second one is that the installer no longer installs the
      Postgresql "iplike" function. It needs to be installed as a separate
      package (if it already exists in the running installation of Postgresql,
      then nothing else needs to be done). If the installer does not find
      iplike it will install a platform independent psql version. That version
      will work but at a lower performance than the native C code
      version.</para>
    </section>

    <section>
      <title>Bug Fixes</title>

      <para>The same goes for bugs:</para>

      <para><ulink
      url="http://opennms.org/index.php/OpenNMS_1.3#Known_Issues">http://opennms.org/index.php/OpenNMS_1.3#Known_Issues</ulink></para>
    </section>
  </section>

  <section>
    <title>Changes in OpenNMS 1.3.2</title>

    <section>
      <title>New Features</title>

      <para>In an attempt to get the release out as fast as possible, we've
      decided to track new features on the OpenNMS wiki:</para>

      <para><ulink
      url="http://opennms.org/index.php/OpenNMS_1.3#New_Features">http://opennms.org/index.php/OpenNMS_1.3#New_Features</ulink></para>
    </section>

    <section>
      <title>Bug Fixes</title>

      <para>The same goes for bugs:</para>

      <para><ulink
      url="http://opennms.org/index.php/OpenNMS_1.3#Known_Issues">http://opennms.org/index.php/OpenNMS_1.3#Known_Issues</ulink></para>
    </section>
  </section>

  <section>
    <title>Changes in OpenNMS 1.3.2</title>

    <section>
      <title>Bug Fixes</title>

      <para>SNMP interface descriptions are no longer printed in hex if they
      contain unprintable characters. In particular, this was seen on
      Microsoft Windows platforms with the default Windows SNMP daemon.</para>
    </section>

    <section>
      <title>Features</title>

      <section>
        <title>NSClient support</title>

        <para>An <ulink url="http://nsclient.ready2run.nl/">NSClient</ulink>
        poller and capsd plugin have been contributed by <ulink
        url="mailto:matt.raykowski@gmail.com">Matt Raykowski</ulink>. This
        allows performance counters on Microsoft Windows platform to be
        queried, with the help of the NSClient agent software on the Windows
        side. No data collection is performed at this time.</para>

        <para>For testing, you can run the NsclientManager implementation
        directly:</para>

        <para><programlisting><command>java -cp $OPENNMS_HOME/lib/opennms_services.jar &lt;hostname&gt; &lt;command&gt; &lt;criticalPercent&gt; &lt;warningPercent&gt; &lt;parameter&gt;</command></programlisting></para>

        <para>Here are a couple of example tests using the command-line
        tool:<orderedlist>
            <listitem>
              <para>Testing the client version:<programlisting><command>java -cp $OPENNMS_HOME/lib/opennms_services.jar org.opennms.netmgt.poller.nsclient.CheckNsc &lt;hostname&gt; CLIENTVERSION 0 0 "1.0.7.0"</command></programlisting></para>
            </listitem>

            <listitem>
              <para>Testing NT services:</para>

              <para><programlisting><command>java -cp $OPENNMS_HOME/lib/opennms_services.jar org.opennms.netmgt.poller.nsclient.CheckNsc &lt;hostname&gt; USEDDISKSPACE 95 90 "C:"</command></programlisting></para>
            </listitem>

            <listitem>
              <para>Testing memory usage:</para>

              <para><programlisting><command>java -cp $OPENNMS_HOME/lib/opennms_services.jar org.opennms.netmgt.poller.nsclient.CheckNsc &lt;hostname&gt; MEMUSE 95 90 ""</command></programlisting></para>
            </listitem>
          </orderedlist></para>

        <para>Available commands:</para>

        <glosslist>
          <glossentry>
            <glossterm>CLIENTVERSION</glossterm>

            <glossdef>
              <para>This check uses the parameter property only. This string
              must be formatted like "#.#.#.#" or empty. If you provide a
              number, such as "1.0.7.0", you are specifying the minimum
              version supported, any version lower than this parameter will
              return 'critical'. If you do not specify a parameter (for
              example, supplying "") the check always returns 'okay' and will
              provide the version number in the response.</para>

              <para>Using CLIENTVERSION in capsd:</para>

              <para><programlisting>&lt;protocol-plugin protocol="NSC-CLIENTVERSION" class-name="org.opennms.netmgt.capsd.plugins.NsclientPlugin" scan="on" user-defined="false"&gt;
  &lt;property key="port" value="1248" /&gt;
  &lt;property key="timeout" value="3000" /&gt;
  &lt;property key="retry" value="2" /&gt;
  &lt;property key="command" value="CLIENTVERSION" /&gt;
  &lt;!-- parameter is optional, if you want to do version checking
    &lt;property key="parameter" value="1.0.7.0" /&gt;
  --&gt;
&lt;/protocol-plugin&gt;</programlisting></para>
            </glossdef>
          </glossentry>

          <glossentry>
            <glossterm>CPULOAD</glossterm>

            <glossdef>
              <para>This check uses the warningPercent and criticalPercent
              properties only. These values must be integers in percentage
              format.</para>

              <para>Using CPULOAD in capsd:</para>

              <para><programlisting>&lt;protocol-plugin protocol="NSC-CPULOAD" class-name="org.opennms.netmgt.capsd.plugins.NsclientPlugin" scan="on" user-defined="false"&gt;
  &lt;property key="port" value="1248" /&gt;
  &lt;property key="timeout" value="3000" /&gt;
  &lt;property key="retry" value="2" /&gt;
  &lt;property key="command" value="CPULOAD" /&gt;
  &lt;property key="warningPercent" value="90" /&gt;
  &lt;property key="criticalPercent" value="95" /&gt;
&lt;/protocol-plugin&gt;</programlisting></para>
            </glossdef>
          </glossentry>

          <glossentry>
            <glossterm>UPTIME</glossterm>

            <glossdef>
              <para>This check simply returns the uptime of the system. No
              validation is performed.</para>
            </glossdef>
          </glossentry>

          <glossentry>
            <glossterm>USEDDISKSPACE</glossterm>

            <glossdef>
              <para>This check uses the warningPercent and criticalPercent
              properties to determine thresholds. These values must be
              integers and they should be in percentage form (e.g. 1-100.) The
              parameter property is used to determine the drive letter, either
              "C" or "C:" can be used. Some older services have mixed support,
              so try adding/removing the ':' if you are experiencing
              problems.</para>

              <para>Using USEDDISKSPACE in capsd:</para>

              <para><programlisting>&lt;protocol-plugin protocol="NSC-C-SPACE" class-name="org.opennms.netmgt.capsd.plugins.NsclientPlugin" scan="on" user-defined="false"&gt;
  &lt;property key="port" value="1248" /&gt;
  &lt;property key="timeout" value="3000" /&gt;
  &lt;property key="retry" value="2" /&gt;
  &lt;property key="command" value="USEDDISKSPACE" /&gt;
  &lt;property key="warningPercent" value="90" /&gt;
  &lt;property key="criticalPercent" value="95" /&gt;
  &lt;property key="parameter" value="C:" /&gt;
&lt;/protocol-plugin&gt;</programlisting></para>
            </glossdef>
          </glossentry>

          <glossentry>
            <glossterm>SERVICESTATE</glossterm>

            <glossdef>
              <para>This check determines the status of NT services on a
              remove server. This check only uses the parameter property. The
              parameter property should contain a comma delimited list of
              services you would like the status of.</para>

              <para>Using SERVICESTATE in capsd:</para>

              <para><programlisting>&lt;protocol-plugin protocol="NSC-SERVICE-SERVERS" class-name="org.opennms.netmgt.capsd.plugins.NsclientPlugin" scan="on" user-defined="false"&gt;
  &lt;property key="port" value="1248" /&gt;
  &lt;property key="timeout" value="3000" /&gt;
  &lt;property key="retry" value="2" /&gt;
  &lt;property key="command" value="SERVICESTATE" /&gt;
  &lt;property key="parameter" value="Eventlog,lanmanserver,Netlogon,RpcSs" /&gt;
&lt;/protocol-plugin&gt;</programlisting></para>
            </glossdef>
          </glossentry>

          <glossentry>
            <glossterm>PROCSTATE</glossterm>

            <glossdef>
              <para>This check determines whether or not a list of processes
              are running on a remote server. This check only uses the
              parameter property. The parameter property should contain a
              comma delimited list of processes you want to determine the
              status of.</para>

              <para>Using PROCSTATE in capsd:</para>

              <para><programlisting>&lt;protocol-plugin protocol="NSC-PROCESS-NAVISPHERE" class-name="org.opennms.netmgt.capsd.plugins.NsclientPlugin" scan="on" user-defined="false"&gt;
  &lt;property key="port" value="1248" /&gt;
  &lt;property key="timeout" value="3000" /&gt;
  &lt;property key="retry" value="2" /&gt;
  &lt;property key="command" value="SERVICESTATE" /&gt;
  &lt;property key="parameter" value="naviagent.exe,EmcPowSrv.exe" /&gt;
&lt;/protocol-plugin&gt;</programlisting></para>
            </glossdef>
          </glossentry>

          <glossentry>
            <glossterm>MEMUSE</glossterm>

            <glossdef>
              <para>This check uses the warningPercent and criticalPercent
              properties only. These values must be integers in percentage
              format.</para>

              <para>Using MEMUSE in capsd:</para>

              <para><programlisting>&lt;protocol-plugin protocol="NSC-MEMORY" class-name="org.opennms.netmgt.capsd.plugins.NsclientPlugin" scan="on" user-defined="false"&gt;
  &lt;property key="port" value="1248" /&gt;
  &lt;property key="timeout" value="3000" /&gt;
  &lt;property key="retry" value="2" /&gt;
  &lt;property key="command" value="MEMUSE" /&gt;
  &lt;property key="warningPercent" value="90" /&gt;
  &lt;property key="criticalPercent" value="95" /&gt;
&lt;/protocol-plugin&gt;</programlisting></para>
            </glossdef>
          </glossentry>

          <glossentry>
            <glossterm>COUNTER</glossterm>

            <glossdef>
              <para>This check is used to check the PerfMon OID objects on a
              remote Windows server. This check uses the warningPercent and
              criticalPercent properties as <emphasis>values</emphasis>. These
              values may or may not actually be in percentage format. You will
              have to use discretion when setting these up and read the
              documentation for the specific PerfMon OID that you will be
              monitoring. It also uses the parameter property to define the
              PerfMon OID that you will be monitoring.</para>

              <para>Using COUNTER in capsd:</para>

              <para><programlisting>&lt;protocol-plugin protocol="NSC-PRINT-QUEUE" class-name="org.opennms.netmgt.capsd.plugins.NsclientPlugin" scan="on" user-defined="false"&gt;
  &lt;property key="port" value="1248" /&gt;
  &lt;property key="timeout" value="3000" /&gt;
  &lt;property key="retry" value="2" /&gt;
  &lt;property key="command" value="COUNTER" /&gt;
  &lt;property key="warningPercent" value="10" /&gt;
  &lt;property key="criticalPercent" value="20" /&gt;
  &lt;property key="parameter" value="\Print Queue(_Total)\Jobs" /&gt;
&lt;/protocol-plugin&gt;</programlisting></para>
            </glossdef>
          </glossentry>

          <glossentry>
            <glossterm>FILEAGE</glossterm>

            <glossdef>
              <para>This check is used to determine the age of a specified
              file on the remote server. This check uses the warningPercent
              and criticalPercent properties as <emphasis>values</emphasis>.
              These values will be the newest age of the file allowed in
              <emphasis>minutes</emphasis>. For example, if you set the
              criticalPercent to 60 then a file that is 59 minutes or
              <emphasis>newer</emphasis> will result in a critical response
              from the manager. This check uses the parameter property to
              determine the <emphasis>full path</emphasis> of the file to be
              monitored. This check is useful for monitoring log files or
              other files that may collect critical events or files that
              should rarely change. Note: This check does not yet support
              using the modified date response supplied by the server.</para>

              <para>Using FILEAGE in capsd:</para>

              <para><programlisting>&lt;protocol-plugin protocol="NSC-SYSTEMFILES" class-name="org.opennms.netmgt.capsd.plugins.NsclientPlugin" scan="on" user-defined="false"&gt;
  &lt;property key="port" value="1248" /&gt;
  &lt;property key="timeout" value="3000" /&gt;
  &lt;property key="retry" value="2" /&gt;
  &lt;property key="command" value="FILEAGE" /&gt;
  &lt;property key="warningPercent" value="0" /&gt;
  &lt;property key="criticalPercent" value="525600" /&gt; &lt;!-- two years --&gt;
  &lt;property key="parameter" value="C:\autoexec.bat" /&gt;
&lt;/protocol-plugin&gt;</programlisting></para>
            </glossdef>
          </glossentry>
        </glosslist>
      </section>
    </section>
  </section>

  <section>
    <title>Changes in OpenNMS 1.3.1</title>

    <section>
      <title>Bug Fixes</title>

      <para>A potential database connection leak was discovered in 1.3.0 and
      this release was generated to include that fix.</para>
    </section>

    <section>
      <title>Features</title>

      <para>There are no new features in 1.3.1, but more work was done on the
      NRPE client code.</para>

      <para>One problem with OpenNMS comes from upgrading. If a new feature
      like NRPE support is added, the configuration files are often modified
      to provide examples of the new feature.</para>

      <para>This causes problems when upgrading, since a change to the default
      file will often result in an .rpmnew file being generated, requiring a
      manual merge.</para>

      <para>The existing configuration files have been streamlined to only
      include those features most likely to be used by end users, and the more
      exotic configuration options will now be shown in example files, found
      in the <filename>$OPENNMS_HOME/etc/examples</filename> directory. The
      default files should thus be less likely to change and require less
      effort during an upgrade.</para>
    </section>
  </section>

  <section>
    <title>Changes in OpenNMS 1.3.0</title>

    <section>
      <title>New Features</title>

      <para>As with many open source projects, the OpenNMS documentation could
      be better. For many of the new and somewhat complex features in this
      development release, please refer to the Wiki page for that particular
      feature.</para>

      <bridgehead>SNMP version 3 Support</bridgehead>

      <para>Support for SNMP version 3, both Authentication and Privacy, for
      polling and data collection. Trap support is soon to follow. For
      detailed information see:</para>

      <para><ulink
      url="http://www.opennms.org/wiki/index.php?page=SnmpV3Configuration">http://www.opennms.org/wiki/index.php?page=SnmpV3Configuration</ulink></para>

      <bridgehead>JMX Polling and Data Collection</bridgehead>

      <para>OpenNMS is written in Java. We like Java. But one of the
      shortcomings is that it is hard to determine what resources are being
      used within the virtual machine. The java process might be using 512 MB,
      but how much of that is the actual application within the machine using?
      Close to all of it? Very little?</para>

      <para>The new JMX poller and data collector will allow for this
      information from within the virtual machine to be used in pollers and
      collectors. Also note this is our first non-SNMP based data
      collector.</para>

      <para>More Information: <ulink
      url="http://www.opennms.org/wiki/index.php?page=JMXConfiguration">http://www.opennms.org/wiki/index.php?page=JMXConfiguration</ulink></para>

      <para>Serious kudos to Mike Jamison for his work on bringing this to
      OpenNMS.</para>

      <bridgehead>Alarms</bridgehead>

      <para>What happens if you get lots of the same event? It has the ability
      to clog up the event browser. In the office there is a Linksys router
      that sends an SNMP trap on every network connection (over 100,000 a day
      sometimes).</para>

      <para>The new alarms system will allow important events to be "reduced"
      into alarms. If an event comes in with the same "reduction key" as a
      previous event, the alarm will increment the "count" of events, yet it
      will still only take up a single line in the alarm browser. Clicking on
      the count will bring up the event browser with just the events that have
      been reduced.</para>

      <para>More Information: <ulink
      url="http://www.opennms.org/wiki/index.php?page=Alarms">http://www.opennms.org/wiki/index.php?page=Alarms</ulink></para>

      <bridgehead>Automations</bridgehead>

      <para>OpenNMS provides you with a more robust solution by automating its
      behavior to meet the requirements of your business or organization. For
      example, say you have an alarm with the severity of Minor that has not
      been acknowledged in the last 20 minutes you might want to escalate the
      severity. As of version 1.2, OpenNMS has a daemon that runs SQL
      statements on an interval called Vacuumd. Its configuration has been
      enhanced with a configuration that now allows configuration of processes
      we're calling Automations that are defined by Triggers and
      Actions.</para>

      <para>More Information: <ulink
      url="http://www.opennms.org/wiki/index.php?page=Automations">http://www.opennms.org/wiki/index.php?page=Automations</ulink></para>

      <bridgehead>Roles</bridgehead>

      <para>This is a new feature for managing Notifications. If you have,
      say, an On-Call role where the users change over time, this feature
      allows you to schedule them in advance and OpenNMS will manage that
      schedule for you.</para>

      <para>More Information: <ulink
      url="http://www.opennms.org/wiki/index.php?page=Roles">http://www.opennms.org/wiki/index.php?page=Roles</ulink></para>

      <bridgehead>Group Duty Schedules</bridgehead>

      <para>Bill Ayres wrote a nifty feature called Group Duty Schedules. You
      add them just as you would add Duty Schedules to users. If a Group is
      listed as a target in a destination path, the duty schedule will apply
      to the whole group (individual users and roles also in the target are
      not affected).</para>

      <para>The best part of this feature is that the notices are still
      created (and will show up on the main page). However, if a notice that
      is created while a group is off duty has not been acknowledged by the
      time they come on duty, it will be sent. So if there are, say, a group
      of servers that you wish to monitor but don't wish to be paged about in
      the middle of the night, you can use this feature so you know about them
      when you come back on duty the next business day.</para>

      <bridgehead>New HTTP Monitor</bridgehead>

      <para>The HTTP Monitor has been improved to handle virtual domains,
      different clients, etc. It was based in large part on work done by
      Erasmo Zubillaga (Bug 919).</para>

      <para>More Information: <ulink
      url="http://www.opennms.org/wiki/index.php?page=HttpMonitor">http://www.opennms.org/wiki/index.php?page=HttpMonitor</ulink></para>

      <bridgehead>JFreeChart Support</bridgehead>

      <para>You will notice that on the front page of the OpenNMS webUI there
      are a number of charts displaying information from the OpenNMS database.
      OpenNMS now supports a JFreeChart integration. It currently only
      supports bar charts, and the configuration is controlled by the
      <filename>chart-configuration.xml </filename>file.</para>

      <para>More Information: <ulink
      url="http://www.opennms.org/wiki/index.php?page=JFreeChartSupport">http://www.opennms.org/wiki/index.php?page=JFreeChartSupport</ulink></para>

      <bridgehead>Zoom Feature for RRDs</bridgehead>

      <para>Borrowed from Cacit, Mike Huot has created the ability to zoom in
      on RRD graphs within OpenNMS. Simply click on a graph to bring it up in
      a new window, and then drag the mouse to highlight the region you want
      to zoom. You can zoom in multiple times. Hit the back button on your
      browser to zoom out.</para>

      <bridgehead>New Look to Availability Reports</bridgehead>

      <para>Jonathan Sartin has made some nice changes to the Availability
      Reports look. Instead of bar graphs you get a calendar with colored
      circles representing the availability level with the actual availability
      number inside the circle. Just choose "Calendar" format when generating
      the reports to see the new style.</para>
    </section>

    <section>
      <title>Bug Fixes</title>

      <para>There have been entire sections of OpenNMS rewritten to accomodate
      the new features and to make the product more scalable. Please visit the
      <filename>CHANGELOG</filename> for a better list.</para>
    </section>
  </section>

  <section>
    <title>Changes in OpenNMS 1.2.4</title>

    <section>
      <title>New Features</title>

      <bridgehead>The Use of "~" For Regular Expressions</bridgehead>

      <para>The ability to access the OpenNMS database via rules and filters
      is pretty powerful. With this release you can use the "~" character to
      imbed regular expressions on the right hand side of the rule or filter.
      Previously, the "~" character meant the same as "like". Note that this
      feature requires PostgreSQL 7.4 or higher. Earlier version will behave
      just like "like".</para>

      <bridgehead>RESOLVED Behavior Options</bridgehead>

      <para>Currently, when a "down" event notification is auto-acknowledged
      with an "up" event, a "RESOLVED" message gets sent to anyone who got the
      original "down" notice. However, if the problem is manually
      acknowledged, the "RESOLVED" message is not sent.</para>

      <para>With the release, when you configure a destination path, you can
      choose "on", "auto" or "off".</para>

      <para>"on" will send RESOLVED notices to anyone who got the down
      notice.</para>

      <para>"auto" will send RESOLVED notices to anyone who got the down
      notice, and the notice was auto-acknowledged (default).</para>

      <para>"off" will not send RESOLVED notices to anyone.</para>

      <para>Hats off to Bill for this one.</para>

      <bridgehead>The Ability to use %descr% in Notifications</bridgehead>

      <para>Suppose you have a SNMP Trap event that comes in with a huge
      description, including all the varbinds, etc. If you want to make a
      notification that triggers on that event, you will need to recreate or
      copy the description from the event into the notice. With this release,
      you can simply use %descr% to include the triggering event description
      in the notice.</para>

      <para>Thanks to Vincent for this addition.</para>

      <bridgehead>New "url" Parameter in the HTTP and HTTPS
      Plugins</bridgehead>

      <para>Prior to this release, it was hard to add service checks for web
      sites outside of the "root" directory. Now there is a "url" parameter to
      help with this. Suppose I wanted to monitor a wiki that was at
      "http://10.1.1.1/wiki". I'd add the following to
      capsd-configuration.xml:</para>

      <programlisting>        &lt;protocol-plugin protocol="HTTP-Wiki" class-name="org.opennms.netmgt.capsd.HttpPlugin" scan="on" user-defined="false"&gt;
                &lt;property key="port" value="80"/&gt;
                &lt;property key="url" value="/wiki"/&gt;
                &lt;property key="timeout" value="3000"/&gt;
                &lt;property key="retry" value="2"/&gt;
        &lt;/protocol-plugin&gt;</programlisting>

      <para>Then I would need to add a similar entry to
      poller-configuration.xml:</para>

      <programlisting>                &lt;service name="HTTP-Wiki" interval="300000" user-defined="false" status="on"&gt;
                        &lt;parameter key="retry" value="1"/&gt;
                        &lt;parameter key="timeout" value="3000"/&gt;
                        &lt;parameter key="port" value="80"/&gt;
                        &lt;parameter key="url" value="/wiki"/&gt;
                &lt;/service&gt;</programlisting>

      <para>Don't forget the monitor line in the bottom section:</para>

      <programlisting>        &lt;monitor service="HTTP-Wiki"    class-name="org.opennms.netmgt.poller.monitors.HttpMonitor"/&gt;
</programlisting>

      <para>This will test each server for a "/wiki" URL, and if the return
      code is less the 400 the test will pass. Note that this will not work on
      password protected URLs like the one OpenNMS uses. That will be
      addressed in a new monitor coming in the next release (Basic AUTH
      support).</para>
    </section>

    <section>
      <title>Bug Fixes</title>

      <para>A number of small bug fixes have been added:</para>

      <itemizedlist>
        <listitem>
          <para>A typo in the Schedule Outages GUI for "thusday" has been
          corrected.</para>
        </listitem>

        <listitem>
          <para>Fixed an issue with acknowledging events via the GUI</para>
        </listitem>

        <listitem>
          <para>Corrected a case where multiple "Update SNMP" links would
          appear</para>
        </listitem>

        <listitem>
          <para>Modified the HTTP/HTTPS plugins to handle replies that
          included a newline (Thanks Tobey)</para>
        </listitem>

        <listitem>
          <para>Fixed an issue where interfaces could be marked as "Secondary"
          even if they were excluded from collectd (Thanks Bill)</para>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title>Configuration Changes</title>

      <para>A number of configurations have been added:</para>

      <itemizedlist>
        <listitem>
          <para>Added support for RFC1628, the UPS MIB</para>
        </listitem>

        <listitem>
          <para>Added MGE UPS collections and reports</para>
        </listitem>

        <listitem>
          <para>Added SystemEdge and Fujitsu-Siemens events, as well as new
          MGE-UPS event definitions.</para>
        </listitem>

        <listitem>
          <para>Added Netgear events.</para>
        </listitem>

        <listitem>
          <para>64-bit counter support for ifHCInOctets and ifHCOutOctets was
          added.</para>
        </listitem>
      </itemizedlist>
    </section>
  </section>

  <section>
    <title>Changes in OpenNMS 1.2.3</title>

    <section>
      <title>New Features</title>

      <bridgehead>Scheduled Outages Editor</bridgehead>

      <para>The final version of Craig Miskell's (OGP) poll-outages editor is
      included in this release. Accessed from the Admin menu, it allows one to
      configure weekly, monthly and specific poll-outages from the webUI. A
      poll outage is where polling will stop for a particular set of devices
      or a package.</para>

      <para>Choose "Scheduled Outages" from the admin page, and the GUI will
      display the currently configured outages. You can edit those or create
      your own. You can then apply them to notifications, or to particular
      packages in the threshd, collectd and poller configurations.</para>

      <para>Please note that when applied to polling, no checks occur during
      the outage period. The services are not automatically considered "up".
      So if you have a maintenance window that starts at 2am and ends a 4am on
      Sundays, if you take the service down at 1:59 am and OpenNMS marks it as
      down, it will stay down until 4am.</para>

      <para>Hat off to Craig for this feature.</para>

      <bridgehead>Growl Support in OS X</bridgehead>

      <para>If you happen to run OpenNMS on OS X, you can now send
      notifications via Growl. Simply use "growlMessage" as one of the
      services in your destination path. Note that you have to be on the
      machine running OpenNMS to see them.</para>

      <bridgehead>New Events and Graphs</bridgehead>

      <para>There have been a number of event definitions added to OpenNMS,
      including those for NORTEL Contivity and Foundry devices. In addition,
      more support has been added for the SNMP Informant agent.</para>
    </section>

    <section>
      <title>Bug Fixes</title>

      <para>Some people have reported an issue with service polling stopping.
      It was determined that, for some reason on some systems, a particular
      device or devices will cause a polling thread to hang. This would block
      polling from occuring. While the root cause of the issue has not been
      found (i.e. why the thread hangs) the code was modified so that a hung
      thread would not block the whole queue.</para>
    </section>
  </section>

  <section>
    <title>Changes in OpenNMS 1.2.2</title>

    <para>There is only one bug addressed in 1.2.2 concerning possible webUI
    exceptions if there are null values in the
    <varname>issnmpprimary</varname> field in the <varname>interface</varname>
    table of the database.</para>
  </section>

  <section>
    <title>Changes in OpenNMS 1.2.1</title>

    <section>
      <title>New Features</title>

      <bridgehead>XMPP Support</bridgehead>

      <para>Chris Abernethy contributed some code to allow notifications using
      the XMPP instant messaging protocol. This is most commonly associated
      with the Jabber open-source messaging project.</para>

      <para>Edit the <filename>xmpp-configuration.properties</filename> file
      to include the username and password of the user you want to use as the
      originator of the notice. Also include the server you wish to connect to
      in order to send the notice.</para>

      <para>Finally, add an XMPP Address to each user that should receive the
      notification, such as "myname@jabber.org".</para>

      <para>If your destination path command includes xmppMessage, then the
      notification text will be sent via XMPP to the user's XMPP address.
      Note: be sure that the user has allowed messages from the OpenNMS XMPP
      user. When I first tested this, I was blocking all messages from people
      not on my "buddy" list and I never received the notice.</para>

      <para>This was enhancement bug 1168.</para>

      <bridgehead>Support for Labels in SNMP Performance Reports</bridgehead>

      <para>Craig Miskell contributed some code that allows for text strings
      to be collected via SNMP and used to label SNMP Performance
      reports.</para>

      <para>For example, the Net-SNMP agents allows one to collect on disk
      statistics:</para>

      <programlisting>disk /
disk /boot
disk /opt/distros</programlisting>

      <para>This will create a table where the first row is disk space on
      root, the second row is the disk space on /boot, etc.</para>

      <para>The problem is that this configuration:</para>

      <programlisting>disk /boot
disk /
disk /opt/distros</programlisting>

      <para>Is also valid, but the /boot parition is now index one, and / is
      index two.</para>

      <para>Previously, one had to be a little saavy about how to configure
      the order of disk volumes, but now the disk label can just be collected
      and displayed.</para>

      <para>For example, we currently collect on the first instance of the
      Net-SNMP disk table, and just assume it's root:</para>

      <programlisting>&lt;group  name = "net-snmp-root-disk" ifType = "ignore"&gt;
        &lt;mibObj oid=".1.3.6.1.4.1.2021.9.1.6" instance="1" alias="ns-disk-root-tot"    type="gauge"/&gt;
        &lt;mibObj oid=".1.3.6.1.4.1.2021.9.1.7" instance="1" alias="ns-disk-root-avail"    type="gauge"/&gt;
        &lt;mibObj oid=".1.3.6.1.4.1.2021.9.1.8" instance="1" alias="ns-disk-root-used"    type="gauge"/&gt;
        &lt;mibObj oid=".1.3.6.1.4.1.2021.9.1.9" instance="1" alias="ns-disk-root-pct"    type="gauge"/&gt;
&lt;/group&gt;</programlisting>

      <para>To use this feature, we convert it to something more generic, disk
      1 instead of root:</para>

      <programlisting>&lt;mibObj oid=".1.3.6.1.4.1.2021.9.1.2" instance="1" alias="ns-disk-1-name"    type="string"/&gt;
&lt;mibObj oid=".1.3.6.1.4.1.2021.9.1.6" instance="1" alias="ns-disk-1-tot"    type="gauge"/&gt;
&lt;mibObj oid=".1.3.6.1.4.1.2021.9.1.7" instance="1" alias="ns-disk-1-avail"    type="gauge"/&gt;
&lt;mibObj oid=".1.3.6.1.4.1.2021.9.1.8" instance="1" alias="ns-disk-1-used"    type="gauge"/&gt;
&lt;mibObj oid=".1.3.6.1.4.1.2021.9.1.9" instance="1" alias="ns-disk-1-pct"    type="gauge"/&gt;</programlisting>

      <para>Note the new first line. The ".2" OID in this table is the disk
      label, which we now collect. It gets stored in a file called
      <filename>$OPENNMS_HOME/share/rrd/snmp/$NODEID/strings.properties</filename>,
      where the <varname>$NODEID</varname> is the node number of the device
      being collected.</para>

      <para>A sample string.properties file looks like this:</para>

      <programlisting>#Wed Mar 16 17:46:25 EST 2005
ns-disk-3-name=/opt/distros
ns-disk-2-name=/boot
ns-disk-1-name=/</programlisting>

      <para>Once the <filename>datacollection-config.xml </filename>file is
      changed, and OpenNMS is restarted, collectd will begin storing the
      collected strings.</para>

      <para>So, how are they used? To display them in reports, edit the
      <filename>snmp-graph.properties</filename> file. Everything in this file
      that is in "curly braces" is something that OpenNMS supplied to RRDTool
      (or jRobin).</para>

      <programlisting>report.netsnmp.disk1percent.name=Percentage Disk Space on 1
report.netsnmp.disk1percent.columns=ns-disk-1-pct
report.netsnmp.disk1percent.type=node
report.netsnmp.disk1percent.propertiesValues=ns-disk-1-name
report.netsnmp.disk1percent.command=--title="Percentage Disk Space on {ns-disk-1-name}" \
 DEF:dpercent={rrd1}:ns-disk-1-pct:AVERAGE \
 LINE2:dpercent#0000ff:"% Disk Space Used" \
 GPRINT:dpercent:AVERAGE:"Avg  \\: %8.2lf %s" \
 GPRINT:dpercent:MIN:"Min  \\: %8.2lf %s" \
 GPRINT:dpercent:MAX:"Max  \\: %8.2lf %s\n"</programlisting>

      <para>Note the new "properitesValues" line. This line will look for the
      value(s) listed in the appropriate
      <filename>strings.properties</filename> file, such as
      <varname>ns-disk-1-name</varname>. Then putting that value in curly
      braces, as in {ns-disk-1-name} will cause OpenNMS to replace it with the
      proper value.</para>

      <para>By default, OpenNMS now collects on the first 5 disks defined by
      Net-SNMP and disks 2 through 4 as defined by the host-resources MIB.
      Please feel free to improve on this configurations, and post your diff
      as an enchancement bug on <ulink
      url="http://bugzilla.opennms.org">http://bugzilla.opennms.org</ulink>
      for inclusion in a future release.</para>

      <para>Some caveats: Currently this only works for node level
      information. Also, the labels can't be used in notifications or events,
      so if you get a highThreshold alert on disk usage, you won't be able to
      tell exactly which disk (but it should be easy to look up).</para>

      <para>Many thanks to Craig for this work.</para>

      <bridgehead>New DHCP Poller</bridgehead>

      <para>Bill Ayres (OGP) has improved the DHCP poller. The new default
      <filename>dhcp-configuration.xml</filename> file now looks like
      this:</para>

      <programlisting>&lt;DhcpdConfiguration
        port="5818"
        macAddress="00:06:0D:BE:9C:B2"
        myIpAddress="127.0.0.1"
        extendedMode="false"
        requestIpAddress="127.0.0.1"&gt;
&lt;/DhcpdConfiguration&gt;</programlisting>

      <para>The <varname>port</varname> and <varname>macAddress</varname>
      options were there before, but now you can add
      <varname>myIpAddress</varname>, <varname>extendedMode</varname> and a
      <varname>requestIpAddress</varname>.</para>

      <para>With the default configuration, the DHCP poller should act as
      before (although on my test network it now correctly sees that my
      Airport Express does not have a DHCP server on it that is accessible
      from the "wired" side). This is "broadcast" mode.</para>

      <para>The following describes each of the new variables:</para>

      <para><emphasis>myIpAddress</emphasis>: This parameter will usually be
      set to the ip address of the OpenNMS server, which puts the DHCP poller
      in "relay" mode as opposed to "broadcast" mode. In "relay" mode, the
      DHCP server being polled will unicast its responses directly back to the
      specified ip address rather than broadcasting its responses. This allows
      DHCP servers to be polled even though they are not on the same subnet as
      the OpenNMS server, and without the aid of an external relay.</para>

      <para>usage: myIpAddress="10.11.12.13" or myIpAddress="broadcast"
      (default)</para>

      <para><emphasis>extendedMode</emphasis>: When extendedMode is false, the
      DHCP poller will send a DISCOVER and expect an OFFER in return. When
      extendedMode is true, the DHCP poller will first send a DISCOVER. If no
      valid response is received it will send an INFORM. If no valid response
      is received it will then send a REQUEST. OFFER, ACK, and NAK are all
      considered valid responses in extendedMode.</para>

      <para>usage: extendedMode="true" or extendedMode="false"
      (default)</para>

      <para><emphasis>requestIpAddress</emphasis>: This parameter only applies
      to REQUEST queries sent to the DHCP service when extendedMode is true.
      If an ip address is specified, that ip address will be requested in the
      query. If "targetHost" is specified, the DHCP server's own ip address
      will be requested. Since a well-managed server will probably not respond
      to a request for its own ip, this parameter can also be set to
      "targetSubnet". This is similar to "targetHost" except the DHCP server's
      ip address is incremented or decremented by 1 to obtain an ip address
      that is on the same subnet. (The resulting address will not be on the
      same subnet if the DHCP server's subnet is a /32 or /31. Otherwise, the
      algorithm used should be reliable.)</para>

      <para>usage: requestIpAddress="10.77.88.99" or
      requestIpAddress="targetHost" or requestIpAddress="targetSubnet"
      (default)</para>

      <para><emphasis role="bold">Caution on usage:</emphasis> If in extended
      mode, the time required to complete the poll for an unresponsive node is
      increased by a factor of 3. Thus it is a good idea to limit the number
      of retries to a small number.</para>

      <para>Thanks to Bill for his hard work on this.</para>

      <bridgehead>GUI for <filename>snmp-config.xml</filename></bridgehead>

      <para>Gerald Turner has written a useful admin GUI for managing the
      <filename>snmp-config.xml</filename> file. It allows you to add specific
      IP addresses and IP address ranges and associate them with community
      strings.</para>

      <para>For example, if you have the following default
      <filename>snmp-config.xml</filename> file:</para>

      <programlisting>&lt;snmp-config retry="3" timeout="800" read-community="public" write-community="private"&gt;

&lt;/snmp-config&gt;</programlisting>

      <para>this will use the default community string of "public" for SNMP
      requests. Using the GUI, one can add a range that, say, uses
      "public2":</para>

      <programlisting>&lt;snmp-config retry="3" timeout="800" read-community="public" write-community="private"&gt;
    &lt;definition read-community="public2"&gt;
        &lt;range begin="192.168.0.1" end="192.168.0.254"/&gt;
    &lt;/definition&gt;
&lt;/snmp-config&gt;</programlisting>

      <para>You can also add specific IP addresses, say this one for
      "public3":</para>

      <programlisting>&lt;snmp-config retry="3" timeout="800" read-community="public" write-community="private"&gt;
    &lt;definition read-community="public2"&gt;
        &lt;range begin="192.168.0.1" end="192.168.0.254"/&gt;
    &lt;/definition&gt;
    &lt;definition read-community="public3"&gt;
        &lt;specific&gt;192.168.1.1&lt;/specific&gt;
    &lt;/definition&gt;
&lt;/snmp-config&gt;</programlisting>

      <para>This feature will automatically do things like split ranges. For
      example, add "public4" as the string for 192.168.0.50:</para>

      <programlisting>&lt;snmp-config retry="3" timeout="800" read-community="public" write-community="private"&gt;
    &lt;definition read-community="public2"&gt;
        &lt;range begin="192.168.0.1" end="192.168.0.49"/&gt;
        &lt;range begin="192.168.0.51" end="192.168.0.254"/&gt;
    &lt;/definition&gt;
    &lt;definition read-community="public3"&gt;
        &lt;specific&gt;192.168.1.1&lt;/specific&gt;
    &lt;/definition&gt;
    &lt;definition read-community="public4"&gt;
        &lt;specific&gt;192.168.0.50&lt;/specific&gt;
    &lt;/definition&gt;
&lt;/snmp-config&gt;</programlisting>

      <para>There is a caveat. If you add a specific entry like 192.168.1.1
      above, and then go back and add a range that includes that specific IP,
      the range will overwrite the specific entry, as in this example for
      "public5":</para>

      <programlisting>&lt;snmp-config retry="3" timeout="800" read-community="public" write-community="private"&gt;
    &lt;definition read-community="public2"&gt;
        &lt;range begin="192.168.0.1" end="192.168.0.49"/&gt;
        &lt;range begin="192.168.0.51" end="192.168.0.254"/&gt;
    &lt;/definition&gt;
    &lt;definition read-community="public4"&gt;
        &lt;specific&gt;192.168.0.50&lt;/specific&gt;
    &lt;/definition&gt;
    &lt;definition read-community="public5"&gt;
        &lt;range begin="192.168.1.1" end="192.168.1.254"/&gt;
    &lt;/definition&gt;
&lt;/snmp-config&gt;</programlisting>

      <para>This feature was designed to help manage this file before
      discovery It will not update the community string for an SNMP agent that
      is already being collectd. In the case that the community string for a
      device changes, and this results in a data collection failure event, it
      is possible to change the community string to the correct one without
      restarting OpenNMS. Use this GUI to make sure the community string is
      correctly in the <filename>snmp-config.xml</filename> file, and then go
      to the device's node page. Click the link that says "Update SNMP" and
      collection should resume.</para>

      <para>This was bug 1167, and I'm leaving it open as an enhancement
      because there is one thing left I'd like to see. I'd like to see the
      current contents of the <filename>snmp-config.xml</filename> file
      displayed on this page as well. It is hoped that it will be available
      for the next release.</para>

      <para>Hats of to Gerald for this work.</para>

      <bridgehead>Other Features</bridgehead>

      <para>There were a number of smaller features included in this
      release:</para>

      <itemizedlist>
        <listitem>
          <para>Added the RESOLVED tag to the body as well as the subject of
          notifications.</para>
        </listitem>

        <listitem>
          <para>Added a Linksys event to stop connection traps from Linksys
          gear.</para>
        </listitem>

        <listitem>
          <para>Added a "focus" to the Add Interface admin page so that it is
          no longer required to select the field before typing the IP
          address.</para>
        </listitem>

        <listitem>
          <para>Greatly improved the execution speed of "Configure SNMP Data
          Collection per Interface" in the Admin webUI.</para>
        </listitem>

        <listitem>
          <para>Added the ability to display the ifAlias in events or
          notifications using %ifalias%.</para>
        </listitem>

        <listitem>
          <para>Improved the error message when entering an invalid Outage ID
          in a search.</para>
        </listitem>

        <listitem>
          <para>Numerous small improvements to the node page in the web
          UI.</para>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title>Bug Fixes</title>

      <para>The following is a list of bug fixes included in this
      release:</para>

      <itemizedlist>
        <listitem>
          <para>There was an issue with SNMP version 2 data collection on
          large devices (i.e. lots of interfaces) where the ifIndex values
          weren't contiguous. This has been corrected. Bug 1141.</para>
        </listitem>

        <listitem>
          <para>Applied the patch to help with 30 second outages. Bug
          1180.</para>
        </listitem>

        <listitem>
          <para>Many people reported issues with 1.2.0 errors with the new
          ifAlias field. It was too small to hold the entire string associated
          with some interfaces, so the size of this field has been increased
          to 256.</para>
        </listitem>

        <listitem>
          <para>Fixed an issue with the service unresponsive behavior being
          active even when not configured. Bug 1151.</para>
        </listitem>

        <listitem>
          <para>Corrected a problem with Top 20 availability reports including
          the wrong services. Bug 945.</para>
        </listitem>

        <listitem>
          <para>The correct time is now shown in notifications, versus GMT.
          Bug 1114.</para>
        </listitem>
      </itemizedlist>

      <para>In addition, DJ Gregor (OGP) has done a number of improvements to
      the build system.</para>
    </section>
  </section>

  <section>
    <title>Changes in OpenNMS 1.2.0</title>

    <para>The only changes between 1.1.5 and 1.2.0 are some bug fixes and the
    addition of a few more datacollection values and reports.</para>
  </section>

  <section>
    <title>Changes in OpenNMS 1.1.5</title>

    <para>The current development goal of the OpenNMS team is to get a new,
    stable release out as soon as time will allow. This will allow for a new
    development cycle that can be very daring in its scope while still
    providing a stable, production application. This release is our second
    release candidate for 1.2.0, and if testing goes well it will be released
    shortly.</para>

    <para>The reason 1.1.4 did not become 1.2.0 was due to a lot of code
    changes to the poller. In fact, the poller has been pretty much rewritten
    and the code reorganized. Those who look at the new poller code should be
    impressed with the work Matt (OGP) did.</para>

    <para>1.1.5 also represents a new development philosophy for the team.
    OpenNMS is now written using "test driven development". In a nutshell:
    when a new feature is desired, or a bug needs fixing, the first piece of
    code that is written is a test to insure that the feature works or that
    the bug does not occur. Since no change is made to the code at this point,
    the test obviously will fail. Then the feature is written or the bug fixed
    until the test passes, and the final step is to clean up the code to
    remove duplication, etc.</para>

    <para>Over the next year, this main change in the development philosophy
    of OpenNMS will reap huge benefits in terms of speed of development and
    code quality.</para>

    <bridgehead>Notifications on Auto-Acknowledged Events</bridgehead>

    <para>The reason the poller code was rewritten was mainly in support of
    this one new feature. OpenNMS has three main functions: service polling,
    data collection and event management. This last feature was hampered by an
    issue with auto-acknowledgement.</para>

    <para>Here's the scenario: A service is down and an event is generated.
    This event triggers a notification, which walks a destination path. The
    first step in the path is to wait for 2 minutes before doing anything, and
    then it is to page the on call person, and if the notification is not
    acknowledged in 15 minutes, the manager is to get paged.</para>

    <para>Well, let's assume the outage occurs at 2 in the morning and lasts
    for four minutes. After the first two minutes, a page is sent to the
    on-call person and it wakes him up.</para>

    <para>Now, prior to this release, when the service is restored two minutes
    later, the auto-acknowledge code would acknowledge the "down" notice, so
    the manager would not get paged. However, unless notices were configured
    for "up" events, the on call person would not know that the service has
    been restored, so they would have to wake up, get logged in and then
    notice that the problem had gone away.</para>

    <para>If notices were configured for "up" events, the on call person would
    know that the service was up and could go back to bed. Unfortunately, if
    the "up" notice walked the same path as the "down" notice, it would have
    to be manually acknowledged or the manager would get a page saying that
    the service was now "up" without ever receiving the "down" page.</para>

    <para>This obviously isn't very useful.</para>

    <para>So now there is an option to send a "resolution" notice when a
    "down" event gets auto-acknowledged by an "up" event. The same notice that
    gets sent with the "down" will be sent with the "up" with the word
    "RESOLVED:" prefixed to the message. It will only be sent to those people
    who got the "down" notice and in the same manner, i.e. e-mail, page,
    etc.</para>

    <para>There are a few things to consider:</para>

    <itemizedlist>
      <listitem>
        <para>Notices concerning "up" events will still get treated as
        separate notifications. This only concerns auto-acknowledged events.
        To avoid the scenario above, "up" notices should be turned off, and
        they have been in the default configuration.</para>
      </listitem>

      <listitem>
        <para>OpenNMS "down" events, such as nodeLostService and nodeDown will
        now always be matched with the corresponding "up" event. For example:
        HTTP stops on a server, so a nodeLostService event is sent. A short
        while later the node itself goes down, causing a nodeDown event. When
        the server is restored, everything is running, so a nodeUp event gets
        generated and a nodeRegainedService event for HTTP. In the past this
        would not happen. Once the node came back up, if HTTP was running no
        event would be sent. If the service was still down, a second
        nodeLostService event would be generated.</para>
      </listitem>
    </itemizedlist>

    <para>For those of you who keep up with the code, notice that there is no
    longer a separate outage daemon. All of that functionality has been
    integrated into the poller.</para>

    <para>To configure this functionality, look at the
    notifd-configuration.xml file. Here is an example:</para>

    <programlisting>        &lt;auto-acknowledge resolution-prefix="RESOLVED: " notify="true" uei="uei.opennms.org/nodes/nodeRegainedService" 
                          acknowledge="uei.opennms.org/nodes/nodeLostService"&gt;
                          &lt;match&gt;nodeid&lt;/match&gt;
                          &lt;match&gt;interfaceid&lt;/match&gt;
                          &lt;match&gt;serviceid&lt;/match&gt;
        &lt;/auto-acknowledge&gt;</programlisting>

    <para>This says "when a nodeRegainedService event is generated,
    auto-acknowledge all notices based on a nodeLostService event where the
    nodeid, interfaceid and serviceid match. In addition, send an notification
    to all parties who received the "down" notice prefixed with the word
    RESOLVED:".</para>

    <para>To disable this feature, set notify="false". "true" is the default.
    The resolution-prefix can be changed to suit non-English languages or user
    preference.</para>

    <bridgehead>A New RADIUS Poller</bridgehead>

    <para>Jonathan Sartin (OGP) has written a new poller to poll RADIUS
    servers. The relavent configuration in capsd is:</para>

    <programlisting>        &lt;protocol-plugin protocol="RadiusAuth" class-name="org.opennms.netmgt.capsd.RadiusAuthPlugin" scan="on" user-defined="false"&gt;
                 &lt;property key="timeout" value="3000"/&gt;
                 &lt;property key="user" value="TEST"/&gt;
                 &lt;property key="password" value="test"/&gt;
                 &lt;property key="secret" value="opennms"/&gt;
                 &lt;property key="retry" value="2"/&gt;
        &lt;/protocol-plugin&gt;</programlisting>

    <para>Note that this requires that a username of "TEST" with a password of
    "test" and secret of "opennms" is configured on the server in order for
    this service to be discovered.</para>

    <para>The poller configuration looks similar:</para>

    <programlisting>                &lt;service name="RadiusAuth" interval="300000" user-defined="false" status="on"&gt;
                        &lt;parameter key="retry" value="3"/&gt;
                        &lt;parameter key="timeout" value="3000"/&gt;
                        &lt;parameter key="user" value="TEST"/&gt;
                        &lt;parameter key="password" value="test"/&gt;
                        &lt;parameter key="secret" value="opennms"/&gt;
                        &lt;parameter key="rrd-repository" value="/var/opennms/rrd/response"/&gt;
                        &lt;parameter key="ds-name" value="radiusauth"/&gt;
                &lt;/service&gt;</programlisting>

    <para>This will also store and graph the response time.</para>

    <bridgehead>SNMP Primary Interface Changes</bridgehead>

    <para>Thanks to Bill Ayres (OGP) we have some new behavior in capsd with
    respect to the primary SNMP interface.</para>

    <para>Previously, there had to be a way to map an IP Address from the
    ipAddrTable to an ifIndex in the ifTable. This was so interface-level
    statistics could be matched up with IP addresses. There were cases,
    however, especially with devices like firewalls where no valid primary
    interface could be determined and thus no data could be collected from the
    device.</para>

    <para>This code will address this, and OpenNMS will still be able to poll
    some SNMP data without having the ifIndex mapping.</para>

    <bridgehead>The MATCH-ANY-UEI Event</bridgehead>

    <para>This new event will never be generated internally, but it does serve
    a useful purpose. Suppose there is a need to get all events from a
    particular server sent as notifications. By choosing this UEI when
    building the notification, it will match the UEI of any event generated by
    the system.</para>

    <para>Note that this can be dangerous, especially on systems that receive
    a lot of SNMP traps. To use this properly, set up a limiting rule, such
    as:</para>

    <programlisting>    &lt;notification name="Test-Match-any" status="off"&gt;
        &lt;uei&gt;MATCH-ANY-UEI&lt;/uei&gt;
        &lt;description&gt;Test&lt;/description&gt;
        &lt;rule&gt;(IPADDR == '10.1.4.10')&lt;/rule&gt;
        &lt;destinationPath&gt;Email-Admin&lt;/destinationPath&gt;
        &lt;text-message&gt;&amp;lt;p&gt;This is a generic notice to match any event UEI 
        that matches the filter rule.&amp;lt;/p&amp;gt;
        &amp;lt;ul&amp;gt;&amp;lt;li&amp;gt;uei: %uei% 
        &lt;/text-message&gt;
        &lt;subject&gt;Notice #%noticeid%: Match Any event: %uei%&lt;/subject&gt;
    &lt;/notification&gt;</programlisting>

    <para>This will send a notice on any event where the IP address is
    10.1.4.10.</para>

    <bridgehead>Added Support for the ifAlias Field</bridgehead>

    <para>A number of people use the ifAlias field to add a useful description
    to a particular interface. Bill Ayres (OGP), Mike Huot (OGP) and Wrolf
    Courtney are responsible for adding the field to the database and printing
    it out on various pages in the webUI.</para>

    <bridgehead>Many Documentation Changes and Installer No Longer
    Automatic</bridgehead>

    <para>DJ Gregor (OGP) has made a lot of changes to our documentation as
    well as the installer. Please, please read the installation guide and note
    that the install program that sets up the database, etc., is no longer run
    when the OpenNMS packages are installed. It will need to be run manually
    after every install. The command:</para>

    <programlisting>$OPENNMS_HOME/bin/install -disU</programlisting>

    <para>should get things working most of the time.</para>

    <bridgehead>JavaMail Bug Fix for Availability Reports</bridgehead>

    <para>A bug was fixed with Availability Reports using the JavaMailer
    class. Some installations of Tomcat included the JavaMail API and
    therefore our JavaMailer would work with those installations. Some users
    are experiencing problems because their install does not have the API in
    the Tomcat <filename>common/lib</filename> directory. The build task was
    modified to include the appropriate jar files in our
    <filename>WEB-INF/lib</filename> directory in case they were
    missing.</para>

    <para>An enhancement was also made to the JavaMailer include a Mail
    Transport Agent (MTA). This MTA is free to use and was provided by John
    Udell (found here: <ulink url="http://zoe.nu/">http://zoe.nu/</ulink>).
    It's included in the OpenNMS libs as "jmta.jar". This enables OpenNMS to
    use a Java mailer without needing a relay SMTP host.</para>

    <para>A new flag has been added to the
    <filename>javamail-configuration.properties</filename> file:
    "org.opennms.core.utils.useJMTA". It defaults to "true".</para>

    <bridgehead>Other Minor Enhancements</bridgehead>

    <para>There are a number of other enhancements worth noting:</para>

    <itemizedlist>
      <listitem>
        <para>Custom KSC reports can now be accessed directly from the main
        page.</para>
      </listitem>

      <listitem>
        <para>A number of new event definitions have been added, including
        those for BMC PATROL, MGE UPSs, Network Appliance, Snort, NetBotz, and
        Compaq Insight Manager.</para>
      </listitem>

      <listitem>
        <para>Both the datacollection-config.xml and snmp-graph.properties
        files (responsible for data collection and display) have been enhanced
        and reorganized. The default loadavg report for Net-SNMP agents has
        been replaced with a really nifty CPU report by Ray Van Dolson.</para>
      </listitem>

      <listitem>
        <para>OpenNMS will recognize if a web page is listening on the Dell
        OpenManage port, and there will be a link from the webUI if so.</para>
      </listitem>
    </itemizedlist>

    <para>There are other small fixes and improvements too numerous to list.
    Please feel free to check out CVS and the CHANGELOG for more.</para>
  </section>

  <section>
    <title>Changes in OpenNMS 1.1.4</title>

    <para>Longtime users of OpenNMS will be pleasantly surprised at the speed
    enhancements of this release. Most of the new code changes focused on
    performance or our goal of making OpenNMS more purely Java (eliminating
    the need for JNI calls to C++ code and perl).</para>

    <bridgehead>Data Collection Queuing System</bridgehead>

    <para>A new queuing system for writing the data collection RRD files has
    been added. Experimental tests have shown that the I/O subsystem is the
    bottle neck for Data Collector performance.</para>

    <para>In order to increase the capacity of our data collector we have
    added an intelligent queuing system for all of our RRD Output. This
    improves performance for us in two ways. One is that it frees up the data
    collection threads to get back to the work of data collection right away.
    As a side benefit it also frees up the polling threads that output RRD
    data related to latency. This makes the data much more accurate.</para>

    <para>The second way that the queuing system provides performance
    improvements is by queuing collected data on a per file basis. Since
    writing a few extra bytes to an RRD file while its open anyway adds very
    little to the update time, this causes the average update cost per data
    point to go down the further the collector gets behind. What this means is
    that you will not lose any data points if the collector is configured to
    collect more than you I/O system can read/write without queuing. It just
    means that the data that is in the files is behind the actual
    collection.</para>

    <para>A last way the queuing system improves data collector performance is
    by giving priority to non-zero data. On many networks, as much as 60% of
    the collected data is zero valued. In most situations, data that has
    remained zero for a long period of time is unimportant data. For this
    reason we give files with non-zero data points priority over files that
    have only zero data points. Monitored interfaces that have only zero
    ifErrors or ifDiscards, for example, will not hold up writing of the data
    for systems that have positive ifErrors and ifDiscards. Please see
    <filename>$OPENNMS_HOME/etc/rrd-configuration.properties</filename> for
    configurations details.</para>

    <para>Thanks to Rackspace and Eric Evans for providing equipment to help
    us implement this and to General Electric's John Lee and Neeraj Malve for
    helping to test this.</para>

    <bridgehead>JRobin Support</bridgehead>

    <para>Though the Collection Queuing above provides a great deal of
    performance benefit, for very high capacity data collection environments
    it was not sufficient. We have found the JRobin 1.4.0 provides performs
    better than RRDTool in our environment. The primary reason for this is
    that JRobin reads a much smaller amount of data on an RRD Open than
    RRDTool does. This increases throughput on systems like ours that max out
    the I/O subsystem doing an open, update, and close on a huge number of
    RRDs. An additional benefit of JRobin is that it is multi-thread enabled
    (unlike our libjrrd.so shared library that interacts with RRDTool) however
    this does not impact performance very much because the contention is not
    the bottle neck. In fact, on some systems that have as many as 100 data
    collection threads, we found that have as few as 2-10 RRD write threads
    were sufficient to populate the RRD files.</para>

    <para>The only unfortunate part of using JRobin is that the file format
    for JRobin is not the same as for RRDTool. This means other tools you may
    be using will not work with JRobin RRD files and will have to converted or
    replaced. JRobin does have some tools available and you should check out
    their website at www.jrobin.org to see what is available. Additionally,
    JRobin supports programmatically all of the features of RRDTool, so it
    should be easy to write a compatible tool. If you do so, please consider
    contributing it either to us or to the JRobin team.</para>

    <para>The last benefit of JRobin is that is helps us to reach our goal of
    a 100% Pure Java version of OpenNMS that can work 'out of the box' on any
    system.</para>

    <para>Thanks go to the JRobin team for providing this excellent RRD
    implementation. Thanks also to Rackspace for providing the equipment to
    let us implement this.</para>

    <bridgehead>Filter Parser Performance Enhancements</bridgehead>

    <para>Thanks to Chris Fedde of On Command, we have found that the SQL
    queries produced by our filtering code were, at times, extremely
    inefficient. On a moderately sized network of only 15K interfaces the
    queries used to define categories could take as long as three minutes on a
    4 CPU system. As a result of this, we have reworked the filter parser and
    now produce much better queries. The equivalent query would now only take
    about a second on the same system. Thanks a lot to Ted Kaczmarek and
    Alexander Hoogerhuis for helping us test it.</para>

    <bridgehead>Delete Node, Interface and Service Improvements</bridgehead>

    <para>There have been a large number of bugs reported with respect to
    deleting nodes from the OpenNMS GUI. This code has been completely
    overhauled in OpenNMS 1.1.4. The new strategy has been to mark a
    node/interface/service deleted rather than actually deleting it. (The node
    completely removed from the database by Vacuumd discussed below.) This
    allows any web pages that are currently viewing the node to react
    properly. Additionally, deletes now happen as database transactions
    providing for performance and data integrity (i.e. no orphaned interface
    records) and you are not left with a half-deleted node.</para>

    <para>In addition to overhauling node deletion, we have also added the
    ability to delete interfaces and services. Administrators have a delete
    link at the top of service and interface detail pages.</para>

    <para>All the users of OpenNMS helped by writing defects and complaining
    about this bug. Special thanks to Ted Kaczmarek, Jonathan Sartin, and Mike
    Huot for their help testing and characterizing these problems and their
    solution.</para>

    <bridgehead>Vacuumd</bridgehead>

    <para>Since nodes, interfaces and services are only marked deleted and not
    actually removed from the database when a delete occurs, some way was
    needed to ensure that the data actually got removed eventually. To do this
    Vacuumd was introduced to provide a mechanism to periodically run database
    maintenance operations. Vacuumd's configuration consists of a set of
    database statements to be run daily (or whichever period is preferable).
    There are four maintenance operations provided by OpenNMS by default.
    These are as follows: delete nodes that have been marked as deleted,
    delete interfaces that have been marked as deleted, delete services that
    have been marked as deleted, and delete any event that is not related to a
    current outage and is older than 6 weeks.</para>

    <para>In order to make sure that Vacuumd properly deletes all the data
    associated with the nodes, interfaces, services or other entries that it
    deletes we have added cascading delete constraints to the database. With
    these if you do a 'DELETE FROM nodes WHERE nodeid=11', for example. You
    delete all the related information, its interfaces, the services on those
    interfaces, the outages related to the node, the events, etc.,
    etc..</para>

    <bridgehead>Database Connection 'Leak' Found</bridgehead>

    <para>Though not an actual leak because the connections are garbage
    collected, we found a problem in the code where database connections were
    being dropped and left for the garbage collector to clean up. This
    problem, which occurred primarily during discovery, would result in an
    abnormally large number of outstanding connections to the database to be
    cleaned up by the garbage collector. Discovery of large networks caused
    the number of connections to the database to easily grow beyond the number
    allowed. Thanks to Chris Fedde and OnCommand for helping us track down
    this problem.</para>

    <bridgehead>JavaMail</bridgehead>

    <para>An OpenNMS objective to become a 100% Java application, requires
    elimination the following dependencies.</para>

    <itemizedlist>
      <listitem>
        <para>/bin/mail</para>
      </listitem>

      <listitem>
        <para>Perl</para>
      </listitem>

      <listitem>
        <para>Metamail package</para>
      </listitem>
    </itemizedlist>

    <para>These dependencies are used for two functions of the OpenNMS
    application: Notification and Availability reporting.</para>

    <para>Installing a fresh copy of OpenNMS will now use the Java Mail API by
    default. Upgrade installs will create two new files that the user will
    have to merge into their existing configurations:
    <filename>destinationPaths.xml.rpmnew</filename> and
    <filename>notficationCommands.xml.rpmnew</filename>.</para>

    <para>The <filename>javamail-configuration.properties</filename> file
    should be modified to specify the sender's address and the SMTP server
    address. This file also provides support for SMTP servers requiring user
    and password authentication.</para>

    <para>There are also major changes to the
    <filename>notificationCommands.xml</filename> file. The schema definition
    for this file has changed requiring that the &lt;command&gt; tag now has
    an attribute called 'binary' and a value of either "true" or "false". This
    flag indicates to the OpenNMS notification processes that the command
    definition is either a system command (as it always has been prior to this
    release) or an OpenNMS Java class (see deveolper notes below). The 1.1.4
    version of this file now has added the following new command
    definitions:</para>

    <para><programlisting>&lt;command binary="false"&gt;
&lt;name&gt;javaPagerEmail&lt;/name&gt;
&lt;execute&gt;org.opennms.netmgt.notifd.JavaMailNotificationStrategy&lt;/execute&gt;
&lt;comment&gt;class for sending pager email notifications&lt;/comment&gt;
&lt;argument streamed="false"&gt;
&lt;switch&gt;-subject&lt;/switch&gt;
&lt;/argument&gt;
&lt;argument streamed="false"&gt;
&lt;switch&gt;-pemail&lt;/switch&gt;
&lt;/argument&gt;
&lt;argument streamed="false"&gt;
&lt;switch&gt;-tm&lt;/switch&gt;
&lt;/argument&gt;
&lt;/command&gt;

&lt;command binary="false"&gt;
&lt;name&gt;javaEmail&lt;/name&gt;
&lt;execute&gt;org.opennms.netmgt.notifd.JavaMailNotificationStrategy&lt;/execute&gt;
&lt;comment&gt;class for sending email notifications&lt;/comment&gt;
&lt;argument streamed="false"&gt;
&lt;switch&gt;-subject&lt;/switch&gt;
&lt;/argument&gt;
&lt;argument streamed="false"&gt;
&lt;switch&gt;-email&lt;/switch&gt;
&lt;/argument&gt;
&lt;argument streamed="false"&gt;
&lt;switch&gt;-tm&lt;/switch&gt;
&lt;/argument&gt;
&lt;/command&gt;</programlisting></para>

    <para>Notice a few changes:</para>

    <itemizedlist>
      <listitem>
        <para>The <computeroutput>&lt;command&gt; </computeroutput>tag now has
        an attribute called 'binary' that when set to "true" will cause the
        notification process to attempt to execute a system command specified
        in the &lt;execute&gt; tag. When not set or set to anything other than
        "true", the notification process assumes it is an OpenNMS notification
        class and will instantiate it and execute its 'send()' method. By
        convention, the "binary" attribute will be set to "false" when new
        notification classes are implemented.</para>
      </listitem>

      <listitem>
        <para>The <computeroutput>&lt;substitution&gt;
        </computeroutput>arguments are not used for notification classes but
        are still supported for notification commands. These "substitution"
        arguments (allthough not gramatially intuitive) are passed to system
        commands as a command line argument when the 'binary' attribute is set
        to "true" and is otherwise ignored.</para>
      </listitem>

      <listitem>
        <para>The <computeroutput>&lt;execute&gt;</computeroutput> tag now
        allows the specification of an OpenNMS Java class name. This class
        name must implement the NotificationStrategy interface (see developer
        notes below). The new JavaMailNotificationStrategy class excepts the
        following <computeroutput>&lt;switch&gt;</computeroutput> tags:
        -subject, -email, -pemail, -tm.</para>
      </listitem>
    </itemizedlist>

    <para>The <filename>destinationPaths.xml</filename> file has changed
    making the default email and pager email notifications use the new Java
    Mail API. All 'email' and 'pagerEmail' <computeroutput>&lt;command&gt;
    </computeroutput>tags have been changed to the new 'javaEmail' and
    'javaPagerEmail' commands in
    <filename>$OPENNMS_HOME/etc/notificationCommands.xml</filename>.</para>

    <bridgehead>Installer / Build System Improvements</bridgehead>

    <para>Thanks so much to new OpenNMS committer DJ Gregor for all his hard
    work on improving the OpenNMS build and install code. Thanks to DJ's
    efforts the installer has improved greatly and is now written completely
    in Java removing (along with the JavaMail feature and Dave Hustace)
    OpenNMS's dependency on Perl.</para>

    <para>That said, we do expect some issues with this, as the installer does
    do a lot of database checks and conversions, and some users have large
    databases.</para>

    <bridgehead>Using A Parameter for Notifications</bridgehead>

    <para>Some notifications, like one based on a highThresholdExceeded event,
    would benefit from being able to key off of not only the event UEI, but a
    value within the event itself.</para>

    <para>With 1.1.4, the ability has been added to key off the parameter name
    and to match it with a particular value.</para>

    <programlisting>    &lt;notification name="HighThreshold" status="on"&gt;
        &lt;uei&gt;uei.opennms.org/threshold/highThresholdExceeded&lt;/uei&gt;
        &lt;description&gt;A high threshold event&lt;/description&gt;
        &lt;rule&gt;(IPADDR IPLIKE *.*.*.*)&lt;/rule&gt;
        &lt;destinationPath&gt;Email-Admin&lt;/destinationPath&gt;
        &lt;text-message&gt;A high threshold was reached on data source %parm[#1]% with %parm[#2]% and %parm[#3]% and %parm[#4]%.&lt;/text-message&gt;
        &lt;subject&gt;Notice #%noticeid%&lt;/subject&gt;
        &lt;varbind&gt;
            &lt;vbname&gt;ds&lt;/vbname&gt;
            &lt;vbvalue&gt;cpu&lt;/vbvalue&gt;
        &lt;/varbind&gt;
    &lt;/notification&gt;</programlisting>

    <para>This will cause the notification to match if it is a high threshold
    event involving the data source name of "cpu" only.</para>

    <para>Note that you must use the name of the parameter, and you can only
    use one. There is a TODO to add the ability to use more than one parameter
    for the match and to use a particular parameter number instead of just the
    name.</para>

    <bridgehead>Other Improvements/Changes/Bug Fixes</bridgehead>

    <para>Here is a small list of other improvements in 1.1.4:</para>

    <itemizedlist>
      <listitem>
        <para>The OpenNMS Group is partnering with the creators of the SNMP
        Informant Windows SNMP agent (formally SNMP4PC), and so a number of
        SNMP Informant data collections and reports have been added.</para>
      </listitem>

      <listitem>
        <para>A bug was fixed with respect to the RTC Categories section which
        could cause the services of new nodes to be counted more than
        once.</para>
      </listitem>

      <listitem>
        <para>To make better use of Bill Ayres' displayCategory field in the
        Assets table, a new event was created that will update RTC when the
        Assets table is changed (which will cause such changes to be reflected
        without a restart).</para>
      </listitem>

      <listitem>
        <para>Also to make this work better, new nodes are created with an
        empty asset record. Thus queries like <computeroutput>displayCategory
        != "test"</computeroutput> will work.</para>
      </listitem>

      <listitem>
        <para>Michael Huot added some code that causes the webUI to turn to
        light blue, similar to "Calculating ..." when the webUI loses
        connectivity with OpenNMS. Code has also been added so the webUI will
        attempt to reconnect to OpenNMS when this happens. This should remove
        the dependency on needing to restart Tomcat after restarting
        OpenNMS.</para>
      </listitem>

      <listitem>
        <para>RPM dependencies have been fixed (bug #906). A packaging error
        caused previous releases to only include a subset of package
        dependencies. Some dependencies have also been fixed for Mandrake
        distributions (bug #933).</para>
      </listitem>

      <listitem>
        <para>A generalized solution has been implemented for choosing a
        proper Java Runtime Environment at runtime. See
        <filename>$OPENNMS_HOME/bin/runjava -h</filename> for details.</para>
      </listitem>

      <listitem>
        <para>The OpenNMS startup script was rewritten to be more
        cross-platform friendly and uses the JRE chosen by
        <filename>runjava</filename>.</para>
      </listitem>

      <listitem>
        <para>Upgraded to the latest PostgreSQL JDBC driver,
        <filename>pg74.215.jdbc3.jar</filename>.</para>
      </listitem>

      <listitem>
        <para>WebUI to OpenNMS communication has been changed to use a
        separate connection for each request, instead of a single connection
        that persists until Tomcat is restarted (or the webapp is reloaded).
        This eliminates exceptions that are thrown when certain administrative
        actions are performed (e.g.: adding a new node through the webUI) if
        OpenNMS is restarted without restarting Tomcat. See bug #897.</para>
      </listitem>
    </itemizedlist>

    <para></para>
  </section>

  <section>
    <title>Changes in OpenNMS 1.1.3 and above</title>

    <para>A tremendous amount of work has been done "under the covers" to
    OpenNMS, and the following features were added in 1.1.3:</para>

    <bridgehead>Support for Duplicate IP Addresses</bridgehead>

    <para>Prior to this release, the algorithm that OpenNMS used to determine
    if a particular interface belonged to a particular node was simple. An
    SNMP walk was done on the device, and all of the IP addresses on that
    device were associated with the node. If that walk discovered a
    "duplicate" address, say from a private network or some backup link, it
    would assume that all of the addresses on that device belonged to the
    device that was discovered with that IP address first.</para>

    <para>This could result in "merged" nodes, especially in environments with
    HSRP.</para>

    <para>This release now supports duplicate IP addresses. The nodes will not
    be merged and an event will be generated.</para>

    <para>Note that networks are not supposed to have duplicate IP addresses.
    In other words, if there are two "10.1.1.1" addresses on a network, and
    OpenNMS sends a "ping" to 10.1.1.1, it will assume that a response means
    that interface 10.1.1.1 is "up", regardless of which "10.1.1.1" interface
    responds.</para>

    <para>Since this feature was mainly written to support inactive or
    unreachable interfaces that were discovered by SNMP, this behavior should
    not present a problem, although it does have the added benefit of being
    able to monitor highly available IP addresses.</para>

    <para>For example, if your website lives at 10.1.1.1, which lives on two
    devices, as long as an HTTP request to 10.1.1.1 is answered (by either
    machine) OpenNMS will mark the service as up.</para>

    <bridgehead>New Asset Configuration "Categories"</bridgehead>

    <para>The rules uses in categories and filter rules, usually along the
    lines of <programlisting>&lt;rule&gt;IPADDR IPLIKE *.*.*.*&lt;/rule&gt;</programlisting>
    are actually quite flexible, and can be built on almost anything in the
    database. However it would be nice to easily place a particular device
    into a category for display on the main page, notifications, etc..</para>

    <para>There are four categories:</para>

    <itemizedlist>
      <listitem>
        <para>Display Category (database field displayCategory): This is to be
        used for grouping devices into a particular category.</para>
      </listitem>

      <listitem>
        <para>Poller Category (database field pollerCategory): This is to be
        used to define devices in a particular poller package.</para>
      </listitem>

      <listitem>
        <para>Notification Category (database field notifyCategory): This
        could be something like "serverAdmin" or "networkAdmin" to be used for
        directing notifications.</para>
      </listitem>

      <listitem>
        <para>Threshold Category (database field thresholdCategory): This is
        to be used to define devices in a particular thresholding
        package.</para>
      </listitem>
    </itemizedlist>

    <para>Note that there is no "hard coded" meaning to these categories, you
    could use "poller" for "threshold" etc.. They are just labeled for
    convenience.</para>

    <para>How would you use them? Well, you would need to modify the
    &lt;filter&gt; or &lt;rule&gt; tags in the configuration files. Suppose
    you had two types of polling packages, like "Gold" and "Silver". You would
    then have a filter like &lt;filter&gt;pollerCategory ==
    "Gold"&lt;/filter&gt; for that package. By just adding the name "Gold" or
    "Silver" to the proper category on the asset screen you can place a
    particular device into that poller package.</para>

    <para>Note that once you have sorted all of your devices, you will need to
    restart OpenNMS for the poller to reload the proper configuration.</para>

    <bridgehead>Added an XML RPC daemon</bridgehead>

    <para>One user of OpenNMS has integrated it into their
    provisioning/billing/support package. They use multiple instances of
    OpenNMS to poll the services on their network, and all of these instances
    talk to a single database. By sending events to
    <filename>eventd</filename>, they can affect changes in how these devices
    are polled (without a restart).</para>

    <para>In order to alert this system to events from OpenNMS, like
    "nodeLostService", we send events out via
    <filename>xmlrpcd</filename>.</para>

    <para>Unfortunately, there is not time to describe in detail how this
    system works, but it will be documented as soon as possible (the hope is
    by 1.2).</para>

    <bridgehead>Support for Java 1.4.2</bridgehead>

    <para>People who used previous versions of OpenNMS on Java 1.4.2 found out
    that it would use up all of the resources on the system and then die. This
    turned out to be due to a very obscure bug in Java. The code was
    re-written to avoid this and now we recommend that OpenNMS is run on
    1.4.2.</para>

    <bridgehead>MIB Compiler for Data Collection</bridgehead>

    <para>John Rodriguez has created a great MIB Compiler to convert native
    MIB information into a format that can be used by
    datacollection-config.xml.</para>

    <para>We hope to import into the webUI in the future. But for now it is
    located in the <filename>contrib</filename> directory under
    <filename>mibparser</filename>.</para>

    <para>In that directory is the complete code (in Java) as well as a
    helpful README. In a nutshell this is how you would use it.</para>

    <para>Change into the dist directory and run the parseMib.sh wrapper
    script. The format is:</para>

    <para><computeroutput> Usage: parseMib.sh &lt;MIB File 1&gt; [&lt;MIB file
    2&gt;...] Example: parseMib.sh RFC-1213.my</computeroutput></para>

    <para>Thus:</para>

    <para><programlisting>$ ./parseMib.sh /usr/share/snmp/mibs/RFC1213-MIB.txt 
    Looking for a good java...
    Using java in user's path...
    Checking Java version for 1.4+...
    Version is: java version "1.4.2_04"
Java(TM) 2 Runtime Environment, Standard Edition (build 1.4.2_04-b05)
Java HotSpot(TM) Client VM (build 1.4.2_04-b05, mixed mode)
    Checking for JAVA_HOME...
    JAVA_HOME not set, trying to find it...
    JAVA_HOME set to: .
    Calling parser...</programlisting></para>

    <para>will generate output that is very familiar to people used to
    modifying datacollection-config.xml. For example:</para>

    <para><programlisting>&lt;mibObj oid=".1.3.6.1.2.1.11.1" instance="0" alias="snmpInPkts" type="Counter" /&gt;
&lt;mibObj oid=".1.3.6.1.2.1.11.2" instance="0" alias="snmpOutPkts" type="Counter" /&gt;
&lt;mibObj oid=".1.3.6.1.2.1.11.3" instance="0" alias="snmpInBadVersions" type="Counter" /&gt;
&lt;mibObj oid=".1.3.6.1.2.1.11.4" instance="0" alias="snmpInBadCommunityNamesTOOLONG" type="Counter" /&gt;
&lt;mibObj oid=".1.3.6.1.2.1.11.5" instance="0" alias="snmpInBadCommunityUsesTOOLONG" type="Counter" /&gt;
&lt;mibObj oid=".1.3.6.1.2.1.11.6" instance="0" alias="snmpInASNParseErrs" type="Counter" /&gt;
&lt;mibObj oid=".1.3.6.1.2.1.11.8" instance="0" alias="snmpInTooBigs" type="Counter" /&gt;
&lt;mibObj oid=".1.3.6.1.2.1.11.9" instance="0" alias="snmpInNoSuchNames" type="Counter" /&gt;</programlisting></para>

    <para>This could be put into a new MIB group,
    <filename>snmp-stats</filename> or some such, directly without having to
    explore the MIB by hand.</para>

    <para>I love this app.</para>

    <para>There are some caveats. In using this I have sometimes seen errors
    where the MIB compiler could not find a referenced variable because it is
    defined in another MIB file. Simply list it first in the list of MIBs to
    parse.</para>

    <para>I have also come across some MIBs that define custom object types
    and the parser does not handle it all that well. It is often possible just
    to delete the offending line from the MIB file (after making a copy of
    course) and try it again.</para>

    <para>OpenNMS can only handle numeric data types, or DisplayStrings that
    can be converted into numbers, so keep that in mind when choosing which
    values to collect.</para>

    <para>We use RRDTool, and RRDTool has a 19 character limit on filenames
    (the part before <filename>.rrd</filename>). Since the "alias" field
    becomes the file name, you cannot have an alias longer than 19 characters.
    The parser will append "TOOLONG" to overlength aliases, and you can edit
    them by hand (it would be possible to truncate the name, but you cannot
    have duplicate aliases and that might occur).</para>

    <para>Finally, OpenNMS can handle a numeric instance (0, 1, 2, ... etc.)
    or an instance of "ifIndex". So an instance of
    "<filename>tcpConnState</filename>" would cause an error.</para>

    <bridgehead>New Build System</bridgehead>

    <para>Our goal is to make OpenNMS as pure Java as possible. However, for a
    variety of reasons we cannot do that yet. When OpenNMS was started,
    <filename>ant</filename> (the program used to build other Java programs)
    had limitations that had to be worked around. This resulted in a workable,
    but somewhat confusing, build system.</para>

    <para>DJ Gregor (building on work started by Edwin Buck) rebuilt the build
    system, making it almost pure <filename>ant</filename>. This was great for
    those doing development, so hats off to Deej and Edwin.</para>

    <bridgehead>New NTP Poller</bridgehead>

    <para>Mike Huot has written a new NTP poller. You will notice it in
    capsd-configuration.xml and poller-configuration.xml. Hat off to
    Mike.</para>

    <bridgehead>Nice Little Things</bridgehead>

    <para>Small additions that deserve mention:<itemizedlist>
        <listitem>
          <para>APC data collection was added.</para>
        </listitem>

        <listitem>
          <para>Added "maxval" and "minval" attributed to the
          <filename>mibObj</filename> definition in
          <filename>datacollection-config.xml</filename> to help eliminate
          spikes.</para>
        </listitem>

        <listitem>
          <para>Started improving start up times on large systems.</para>
        </listitem>

        <listitem>
          <para>Added a sort to KSC reports.</para>
        </listitem>

        <listitem>
          <para>Added an initial delay to notification paths.</para>
        </listitem>
      </itemizedlist></para>

    <bridgehead>Bug Fixes</bridgehead>

    <para>We have lots of bug fixes. I am really tired. Check out the <ulink
    url="http://cvs.sourceforge.net/viewcvs.py/opennms/opennms/CHANGELOG?rev=1.97&amp;view=auto">CHANGELOG</ulink>.</para>
  </section>

  <section id="chap2sect1">
    <title>Changes in OpenNMS 1.1.2 and Above</title>

    <para>The following features were added in 1.1.2:</para>

    <bridgehead>Poller Improvements</bridgehead>

    <para>There are three new pollers available:</para>

    <para><emphasis role="bold">Ssh:</emphasis> Previously, the SSH service
    was polled and discovered using the generic TCP class. This worked fine,
    except that SSH expects a version to be sent with the query. This causes
    numerous logs, thus the TCP class was modified into an SSH class that
    sends the correct version string.</para>

    <para><emphasis role="bold">JDBC:</emphasis> The database pollers also use
    the TCP class to connect to well known ports. Jose Nunez Vicente Zuleta
    created a poller that uses the particular JDBC database driver to make a
    connection, get the system catelogs, and if successful, mark the database
    service as "up". Since this requires a valid username and password that
    can access the database, it is not the default class, but it is pretty
    simple to set up.</para>

    <para>In order to automatically detect and monitor databases, a few
    changes need to be made to both the network and the OpenNMS configuration.
    First, be sure that the username and password you plan to use actually
    works from the OpenNMS server. This will involve changes to pg_hba.conf
    for PostgreSQL, and I am not sure about others.</para>

    <para>Second, you will need to insure that you have a jar file with the
    JDBC driver for your particular database. Copy it to $OPENNMS_HOME/lib
    (the one for PostgreSQL is already included).</para>

    <para>Okay, now you need to modify the capsd configuration to discover the
    service and modify the poller configuration to poll the service.</para>

    <para>capsd: Here is an example for Sybase:</para>

    <para><programlisting>&lt;protocol-plugin protocol="Sybase-JDBC" class-name="org.opennms.netmgt.capsd.JDBCPlugin" scan="on"&gt;
        &lt;property key="user" value="sa"/&gt;
        &lt;property key="password" value="XXXX"/&gt;
        &lt;property key="retry" value="3"/&gt;
        &lt;property key="timeout" value="5000"/&gt;
        &lt;property key="driver" value="com.sybase.jdbc2.jdbc.SybDriver"/&gt;
        &lt;!-- jdbc:sybase:Tds::/ --&gt;
        &lt;property key="url" value="jdbc:sybase:Tds:OPENNMS_JDBC_HOSTNAME:4100/tempdb"/&gt;
&lt;/protocol-plugin&gt;</programlisting></para>

    <para>and one for MySql:<programlisting>&lt;protocol-plugin protocol="MySQL-JDBC" class-name="org.opennms.netmgt.capsd.JDBCPlugin" scan="on"&gt;
        &lt;property key="user" value="root"/&gt;
        &lt;property key="password" value="XXXX"/&gt;
        &lt;property key="retry" value="3"/&gt;
        &lt;property key="timeout" value="5000"/&gt;
        &lt;property key="driver" value="org.gjt.mm.mysql.Driver"/&gt;
        &lt;!-- jdbc:mysql://[&lt;:3306&gt;]/ --&gt;
        &lt;property key="url" value="jdbc:mysql://OPENNMS_JDBC_HOSTNAME:3306/mysql"/&gt;
&lt;/protocol-plugin&gt;</programlisting></para>

    <para>and one for PostgreSQL:</para>

    <programlisting>&lt;protocol-plugin protocol="PostgreSQL-JDBC" class-name="org.opennms.netmgt.capsd.JDBCPlugin" scan="on"&gt;
        &lt;property key="user" value="opennms"/&gt;
        &lt;property key="password" value="opennms"/&gt;
        &lt;property key="retry" value="3"/&gt;
        &lt;property key="timeout" value="5000"/&gt;
        &lt;property key="driver" value="org.postgresql.Driver"/&gt;
        &lt;!-- jdbc:postgresql:[[:&lt;5432&gt;/]] --&gt;
        &lt;property key="url" value="jdbc:postgresql://OPENNMS_JDBC_HOSTNAME:5432/opennms"/&gt; 
&lt;/protocol-plugin&gt;</programlisting>

    <para>Note that the service names for all three of these examples have
    "-JDBC" added to the end of their names. This means you can run them
    separately from the standard database protocols, or if you like, you can
    completely replace the standard protocols. In fact, if you wish, you can
    use the standard port check in capsd, and then use the JDBC poller
    configuration to do the actual polling.</para>

    <para>Here are the poller configuration examples:</para>

    <programlisting>    &lt;service name="Sybase-JDBC" user-defined="false" interval="6000" status="on"&gt;
        &lt;parameter key="user" value="sa"/&gt;
        &lt;parameter key="password" value="XXXX"/&gt;
        &lt;parameter key="timeout" value="3000"/&gt;
        &lt;parameter key="driver" value="com.sybase.jdbc2.jdbc.SybDriver"/&gt;
        &lt;!-- jdbc:sybase:Tds::/ --&gt;
        &lt;parameter key="url" value="jdbc:sybase:Tds:OPENNMS_JDBC_HOSTNAME:4100/tempdb"/&gt;
    &lt;/service&gt;</programlisting>

    <programlisting>    &lt;service name="MySQL-JDBC" user-defined="false" interval="6000" status="on"&gt;
        &lt;parameter key="user" value="root"/&gt;
        &lt;parameter key="password" value="XXXX"/&gt;
        &lt;parameter key="timeout" value="3000"/&gt;
        &lt;parameter key="driver" value="org.gjt.mm.mysql.Driver"/&gt;
        &lt;!-- jdbc:mysql://[&lt;:3306&gt;]/ --&gt;
        &lt;parameter key="url" value="jdbc:mysql:// OPENNMS_JDBC_HOSTNAME:3306/mysql"/&gt;
    &lt;/service&gt;</programlisting>

    <programlisting>   &lt;service name="PostgreSQL-JDBC" user-defined="false" interval="9000" status="on"&gt;
        &lt;parameter key="user" value="opennms"/&gt;
        &lt;parameter key="password" value="opennms"/&gt;
        &lt;parameter key="timeout" value="9000"/&gt;
        &lt;parameter key="driver" value="org.postgresql.Driver"/&gt;
        &lt;!-- jdbc:postgresql:[[:&lt;5432&gt;/]] --&gt;
        &lt;parameter key="url" value="jdbc:postgresql://OPENNMS_JDBC_HOSTNAME:5432/opennms"/&gt;
    &lt;/service&gt;</programlisting>

    <para>One more thing in the poller-configuration file, you will need to
    add &lt;monitor&gt; tags at the bottom:</para>

    <programlisting>  &lt;monitor service="Sybase-JDBC" class-name="org.opennms.netmgt.poller.monitors.JDBCMonitor"/&gt;
  &lt;monitor service="MySQL-JDBC" class-name="org.opennms.netmgt.poller.monitors.JDBCMonitor"/&gt;
  &lt;monitor service="PostgreSQL-JDBC" class-name="org.opennms.netmgt.poller.monitors.JDBCMonitor"/&gt;</programlisting>

    <para>Hats off to Jose for this work.</para>

    <para><emphasis role="bold">General Purpose Script Poller:</emphasis> Bill
    Ayres has written a poller that will execute a script, and based on the
    response from that script it will mark the service as being "up" or
    "down", called the "General Purpose" or "Gp" Poller. He has used it to
    monitor RADIUS servers, for example.</para>

    <para>GpPlugin and GpMonitor work much like TcpPlugin and TcpMonitor in
    that you can use them to define as many custom services as you need, each
    with a unique service name.</para>

    <para>GpPlugin and GpMonitor call an external script or program to test a
    particular service. The script will be passed the IP address of the
    interface OpenNMS is testing ( as --hostname [IP Address]), followed by
    the timeout (as --timeout [timeout]), followed by any optional arguments
    that may need to passed.</para>

    <para>The script is expected to return a string as standard output which
    is then compared to the banner property or parameter to determine success
    or failure of the test.</para>

    <para>The timeout is implemented in GpPlugin and GpMonitor. However, some
    scripts may want to know how long OpenNMS is going to wait for a reply, so
    the timeout value is passed to the script, and can be ignored by the
    script if it is not needed.</para>

    <para>GpPlugin and GpMonitor also check the exit status of the script or
    program. If it is not zero, then the test fails. They will also gather and
    log any standard error output from the script, but the presence of error
    output does not prevent the test from succeeding if the banner matches the
    standard output.</para>

    <para>Example poller parameters are shown below. All of these are optional
    except script, which is required, and will cause an exception to be logged
    if it is missing.</para>

    <para>Example plugin properties are also shown below. All of these are
    optional except script, which is required, and will cause an exception to
    be logged if it is missing.</para>

    <para>These programs use the exec method from Java's Runtime class. Exec
    is known to have pitfalls. (See <ulink
    url="http://www.javaworld.com/javaworld/jw-12-2000/jw-1229-traps.html">When
    Runtime.exec() won't</ulink>) Also, exec does not have a built-in timeout
    feature. In deciding what to do about these shortcomings, Bill discovered
    that Scott McCrory has already done it with his ExecRunner class.
    ExecRunner and StreamGobbler are at <ulink
    url="http://sourceforge.net/">SourceForge</ulink> as part of <ulink
    url="http://spumoni.sourceforge.net/">Spumoni</ulink>.</para>

    <para>One more word about the timeout. ExecRunner expects the timeout in
    integer seconds, not milliseconds, and a value of zero means wait
    indefinitely. To avoid confusion, Bill maintained the OpenNMS practice of
    specifying the timeout in milliseconds. Before passing it on to
    ExecRunner, it gets converted to seconds in the following manner: Zero
    remains zero, 1 thru 1999 gets converted to 1 second, 2000 thru 2999 -&gt;
    2 seconds, 3000 thru 3999 -&gt; 3 seconds, etc..</para>

    <para>Included in contrib is a simple perl test script,
    <filename>gptest.pl</filename>, that is handy for testing, since it is
    easy to edit and change its behaviour.</para>

    <para>To implement Gp, add the following entries, substituting your
    information as needed.</para>

    <para>For capsd configuration:</para>

    <programlisting>&lt;protocol-plugin protocol="GPtest" class-name="org.opennms.netmgt.capsd.GpPlugin" scan="on" user-defined="true"&gt;
   &lt;property key="script" value="/opt/OpenNMS/contrib/gptest.pl"/&gt;
   &lt;property key="banner" value="success"/&gt;
   &lt;property key="args" value="caps-arg1 caps-arg2"/&gt;
   &lt;property key="timeout" value="3000"/&gt;
   &lt;property key="retry" value="1"/&gt;
&lt;/protocol-plugin&gt;</programlisting>

    <para>And for poller configuration:</para>

    <programlisting>&lt;service name="GPtest" interval="300000" user-defined="false" status="on"&gt;
   &lt;parameter key="script" value="/opt/OpenNMS/contrib/gptest.pl"/&gt;
   &lt;parameter key="banner" value="successful"/&gt;
   &lt;parameter key="args" value="poll-arg1 poll-arg2"/&gt;
   &lt;parameter key="retry" value="1"/&gt;
   &lt;parameter key="timeout" value="2000"/&gt;
   &lt;parameter key="rrd-repository" value="/var/opennms/rrd/response"/&gt;
   &lt;parameter key="ds-name" value="GPtest"/&gt;
&lt;/service&gt;</programlisting>

    <para>and the monitor service entry:</para>

    <programlisting>&lt;monitor service="GPtest"   class-name="org.opennms.netmgt.poller.monitors.GpMonitor"/&gt;</programlisting>

    <para>Hats off to Bill for this work, and to Scott for ExecRunner.</para>

    <bridgehead>Script Daemon</bridgehead>

    <para>Speaking of scripts, Jim Doble has written a daemon that will
    execute scripts based on events received or generated by OpenNMS, called
    ScriptD. This process, governed as usual from a configuration file, allows
    one to generally or specifically execute actions based on events in
    OpenNMS.</para>

    <para>The scripting language, as I understand it, is <ulink
    url="http://www.beanshell.org/">beanshell</ulink>. As Jim writes:
    <quote>You will notice that BeanShell is a lot like Java, but with some
    relaxed syntax. For example you do not have to define types for your
    variables, and attributes for which there are simple get methods can be
    accessed as properties (i.e. you can say event.uei or event.getUei()
    interchangably.) </quote></para>

    <para>There are 4 types of scripts that can be run: start-script,
    reload-script, stop-script, and event-script. When ScriptD starts it will
    run all of the commands in the <varname>&lt;start-script&gt;</varname>
    tags. Likewise, when ScriptD stops, it will run all of the commands in the
    <varname>&lt;stop-script&gt;</varname> tags. Also, there is a new event,
    <varname>uei.opennms.org/internal/reloadScriptConfig</varname>, which when
    received will run all of the <varname>&lt;reload-script&gt;</varname>
    tags.</para>

    <para>The final script type, <varname>&lt;event-script&gt;</varname> gets
    run when events are received. Event scripts can have one or more UEI
    elements, which specify the UEI's for which that script should run. If no
    UEI element is present, the script will run for all events.</para>

    <para>The scripts can make use of the <varname>SnmpTrapHelper</varname>
    class, which is a utility to make it easier to manipulate traps from a
    script.</para>

    <para>There is an example <filename>scriptd-configuration.xml
    </filename>file included in the <filename>$OPENNMS_HOME/etc</filename>
    directory.</para>

    <para>If you want to forward all SNMP traps to another machine as an SNMP
    trap, you would use the following event script:</para>

    <programlisting>        &lt;event-script language="beanshell"&gt;

                import org.opennms.core.utils.ThreadCategory;
                import org.apache.log4j.Category;

                ThreadCategory.setPrefix("scriptd-event");
                Category log = ThreadCategory.getInstance();

                event = bsf.lookupBean("event");

                if (event.snmp != null) {
                        log.debug("forwarding a trap");
                        snmpTrapHelper.forwardTrap(event, "10.1.1.1", 162);
                }

        &lt;/event-script&gt;</programlisting>

    <para>This will forward the trap to 10.1.1.1, port 162. Note that the
    event will have SNMP information if the event is indeed an SNMP trap.
    Since internal OpenNMS events do not, you could use that to forward
    OpenNMS events as an SNMP trap to another system:</para>

    <programlisting>&lt;event-script language="beanshell"&gt;

        import org.opennms.core.utils.ThreadCategory;
        import org.apache.log4j.Category;

        ThreadCategory.setPrefix("scriptd-event");
        Category log = ThreadCategory.getInstance();

        event = bsf.lookupBean("event");

        if (event.snmp == null)
        {

                try {

                log.debug("Forwarding an OpenNMS event.");

                SnmpPduTrap trap = snmpTrapHelper.createV1Trap(".1.3.6.1.4.1.5813.1", "10.1.1.16", 6, 1, 0);

                t_dbid = new Integer(event.dbid).toString();
                if (t_dbid != null)
                        snmpTrapHelper.addVarBinding(trap, ".1.3.6.1.4.1.5813.2.1", "OctetString", "text", t_dbid);
                else
                        snmpTrapHelper.addVarBinding(trap, ".1.3.6.1.4.1.5813.2.1", "OctetString", "text", "null");
                if (event.distPoller != null)
                        snmpTrapHelper.addVarBinding(trap, ".1.3.6.1.4.1.5813.2.2", "OctetString", "text", event.distPoller);
                else
                        snmpTrapHelper.addVarBinding(trap, ".1.3.6.1.4.1.5813.2.2", "OctetString", "text", "null");
                if (event.creationTime != null)
                        snmpTrapHelper.addVarBinding(trap, ".1.3.6.1.4.1.5813.2.3", "OctetString", "text", event.creationTime);
                else
                        snmpTrapHelper.addVarBinding(trap, ".1.3.6.1.4.1.5813.2.3", "OctetString", "text", "null");
                if (event.masterStation != null)
                        snmpTrapHelper.addVarBinding(trap, ".1.3.6.1.4.1.5813.2.4", "OctetString", "text", event.masterStation);
                else
                        snmpTrapHelper.addVarBinding(trap, ".1.3.6.1.4.1.5813.2.4", "OctetString", "text", "null");
                if (event.uei != null)
                        snmpTrapHelper.addVarBinding(trap, ".1.3.6.1.4.1.5813.2.6", "OctetString", "text", event.uei);
                else
                        snmpTrapHelper.addVarBinding(trap, ".1.3.6.1.4.1.5813.2.6", "OctetString", "text", "null");
                if (event.source != null)
                        snmpTrapHelper.addVarBinding(trap, ".1.3.6.1.4.1.5813.2.7", "OctetString", "text", event.source);
                else
                        snmpTrapHelper.addVarBinding(trap, ".1.3.6.1.4.1.5813.2.7", "OctetString", "text", "null");
                t_nodeid = new Long(event.nodeid).toString();
                if (t_nodeid != null)
                        snmpTrapHelper.addVarBinding(trap, ".1.3.6.1.4.1.5813.2.8", "OctetString", "text", t_nodeid);
                else
                        snmpTrapHelper.addVarBinding(trap, ".1.3.6.1.4.1.5813.2.8", "OctetString", "text", "null");
                if (event.time != null)
                        snmpTrapHelper.addVarBinding(trap, ".1.3.6.1.4.1.5813.2.9", "OctetString", "text", event.time);
                else
                        snmpTrapHelper.addVarBinding(trap, ".1.3.6.1.4.1.5813.2.9", "OctetString", "text", "null");
                if (event.host != null)
                        snmpTrapHelper.addVarBinding(trap, ".1.3.6.1.4.1.5813.2.10", "OctetString", "text", event.host);
                else
                        snmpTrapHelper.addVarBinding(trap, ".1.3.6.1.4.1.5813.2.10", "OctetString", "text", "null");
                t_interface = event.getInterface();
                if (t_interface != null)
                        snmpTrapHelper.addVarBinding(trap, ".1.3.6.1.4.1.5813.2.11", "OctetString", "text", t_interface);
                else
                        snmpTrapHelper.addVarBinding(trap, ".1.3.6.1.4.1.5813.2.11", "OctetString", "text", "null");
                if (event.snmphost != null)
                        snmpTrapHelper.addVarBinding(trap, ".1.3.6.1.4.1.5813.2.12", "OctetString", "text", event.snmphost);
                else
                        snmpTrapHelper.addVarBinding(trap, ".1.3.6.1.4.1.5813.2.12", "OctetString", "text", "forge.opennms.com");
                if (event.service != null)
                        snmpTrapHelper.addVarBinding(trap, ".1.3.6.1.4.1.5813.2.13", "OctetString", "text", event.service);
                else
                        snmpTrapHelper.addVarBinding(trap, ".1.3.6.1.4.1.5813.2.13", "OctetString", "text", "null");
                if (event.descr != null)
                        snmpTrapHelper.addVarBinding(trap, ".1.3.6.1.4.1.5813.2.16", "OctetString", "text", event.descr);
                else
                        snmpTrapHelper.addVarBinding(trap, ".1.3.6.1.4.1.5813.2.16", "OctetString", "text", "null");
                if (event.severity != null)
                        snmpTrapHelper.addVarBinding(trap, ".1.3.6.1.4.1.5813.2.18", "OctetString", "text", event.severity);
                else
                        snmpTrapHelper.addVarBinding(trap, ".1.3.6.1.4.1.5813.2.18", "OctetString", "text", "null");
                if (event.pathoutage != null)
                        snmpTrapHelper.addVarBinding(trap, ".1.3.6.1.4.1.5813.2.19", "OctetString", "text", event.pathoutage);
                else
                        snmpTrapHelper.addVarBinding(trap, ".1.3.6.1.4.1.5813.2.19", "OctetString", "text", "null");
                if (event.operinstruct != null)
                        snmpTrapHelper.addVarBinding(trap, ".1.3.6.1.4.1.5813.2.20", "OctetString", "text", event.operinstruct);
                else
                        snmpTrapHelper.addVarBinding(trap, ".1.3.6.1.4.1.5813.2.20", "OctetString", "text", "null");

                snmpTrapHelper.sendTrap("public", trap, "10.1.1.15", 162);

                }

                catch (e) {
                    sw = new StringWriter();
                    pw = new PrintWriter(sw);
                    e.printStackTrace(pw);
                    log.debug(sw.toString());
                }
        }

        &lt;/event-script&gt;</programlisting>

    <para>This will send an newly defined OpenNMS trap with the important
    event information embedded as varbinds.</para>

    <para>If you wanted to limit the forwarded OpenNMS events to
    <varname>nodeLostService</varname> and
    <varname>nodeRegainedService</varname>, you can add a
    <varname>&lt;uei&gt;</varname> tag:</para>

    <programlisting>        &lt;event-script language="beanshell"&gt;
                &lt;uei name="uei.opennms.org/nodes/nodeLostService"/&gt;
                &lt;uei name="uei.opennms.org/nodes/nodeRegainedService"/&gt;
</programlisting>

    <para>To the first part of the <varname>&lt;event-script&gt;</varname>
    tag.</para>

    <para>Hats off to Jim for this work.</para>

    <bridgehead>Maps</bridgehead>

    <para>Okay, let us get this out in the open. I do not care for maps in
    network management. Yes, they are nice looking, but truely useful maps
    cannot be automated, and the manual process of generating maps takes more
    time than they are worth.</para>

    <para>That said, my opinions do not mean much in this project (grin) and
    if someone is willing to put in some work and write solid code I am more
    than willing to accept it. Thus, Derek Glidden decided to go and write a
    mapping system for OpenNMS.</para>

    <para>This will display the nodes as icons, and the current availability
    is displayed in color underneath it. You can view it in a tree mode or
    just as a list of icons, and the image will automatically refresh. The
    parenting relationships have to be manually set.</para>

    <para>The image is built and displayed using Scalable Vector Graphics
    (SVG). I think this is a great decision, but the downside is that the only
    SVG viewer I was able to get to work was from Adobe for Internet Explorer
    on Windows. I was not able to get SVG to work with Mozilla or Safari (on
    Mac). Using the system on IE was very clean and fast.</para>

    <para>There is the option to convert the SVG image to a PNG image. This is
    extremely processor intensive, takes a long time on a network of any size,
    and often fails. It is not recommended.</para>

    <para>Scared yet? (grin)</para>

    <para>For these reasons I am treating the current map implementation as
    contributed code (i.e. not supported). It is hoped, however, that Derek
    and others will work to make more improvements to the system.</para>

    <para>Okay, to get started, read the <filename>map.disable</filename> file
    in <filename>$OPENNMS_HOME/etc</filename>. You will need to copy this file
    to <filename>map.enable</filename>. This will add a "Map" menu item in the
    WebUI.</para>

    <para>You will also have to make some changes to the tomcat4
    configuration. First, you need to set <varname>headless</varname> equal to
    <varname>true</varname>, and second you should probably increase the
    memory available to Tomcat (especially if you are trying to use the SVG to
    PNG transcoder). <varname>OutOfMemory</varname> exceptions in Tomcat are
    indicative of a too small memory setting when trying to render the
    map.</para>

    <para>I know this whole things sounds a bit negative, but that is no
    reflection on Derek's work. He wrote very clean code and I like the
    architecture (SVG especially) that he came up with. The icons are cool,
    too. So hats off to Derek.</para>

    <para>But I am bracing myself for the onslaught of questions like
    <quote>"Can I add a background?"</quote>, <quote>"Can I change the icons
    based on systemOID?"</quote>, and <quote>"Can I make submaps?"</quote>.
    Patience, please.</para>

    <bridgehead>Nice Little Things</bridgehead>

    <para>The following little changes and improvements have been made:</para>

    <itemizedlist>
      <listitem>
        <para>Added RFC2325 to the data collection configuration</para>
      </listitem>

      <listitem>
        <para>Added a "bits" report (to replace bytes) and made it the default
        report for KSC reports.</para>
      </listitem>

      <listitem>
        <para>Added the ability to define a "null" filter (can speed up
        OpenNMS starting)</para>
      </listitem>

      <listitem>
        <para>Added new Cisco and UCD-SNMP reports (Thanks Tony and
        Stuart)</para>
      </listitem>

      <listitem>
        <para>Added new trap definitions for IBM and Intel</para>
      </listitem>
    </itemizedlist>

    <bridgehead>Bugs</bridgehead>

    <para>As we move toward the next stable release of OpenNMS, a number of
    bugs have been fixed, including:</para>

    <itemizedlist>
      <listitem>
        <para>Added a check to handle null terminated strings in traps (Thanks
        Dave W.)</para>
      </listitem>

      <listitem>
        <para>Corrected issues with day/week/month/year buttons in WebUI on
        various browsers</para>
      </listitem>

      <listitem>
        <para>Changed the open count in notifications to reflect those for the
        user instead of the system</para>
      </listitem>

      <listitem>
        <para>Fixed a typo in <filename>mail.pl</filename> in the
        <filename>contrib</filename> directory</para>
      </listitem>

      <listitem>
        <para>Added a small fix to the HTTP and HTTPS monitors that could
        cause a <varname>ClassCastException</varname> (Thanks Jim)</para>
      </listitem>

      <listitem>
        <para>Added an ORDER BY statement to insure that categories reflect
        the correct values.</para>
      </listitem>

      <listitem>
        <para>Added code to explicitly close sockets in plugins and monitors
        (see the Known Issues below for Java 1.4.2)</para>
      </listitem>

      <listitem>
        <para>Bug 708: Fixed issues with viewing events when nodes are
        deleted</para>
      </listitem>

      <listitem>
        <para>Bug 715: Added security roles to <filename>web.xml</filename>
        (Thanks DJ)</para>
      </listitem>

      <listitem>
        <para>Bug 741: Fixed issues with the SNMP admin page and null
        <varname>issnmpprimary</varname> values.</para>
      </listitem>

      <listitem>
        <para>Bug 748: Added code to catch <varname>rrdUpdate</varname>
        exceptions that could cause false <varname>nodeDown</varname>
        events</para>
      </listitem>

      <listitem>
        <para>Bug 752: Fixed a bug that caused certain rules to match all
        events</para>
      </listitem>
    </itemizedlist>
  </section>

  <section id="chap2sect2">
    <title>Changes in OpenNMS 1.1.1 and Above</title>

    <para>The following features were added in 1.1.1:</para>

    <bridgehead>Trap Handling</bridgehead>

    <para>SNMP Traps will now be associated with nodes if the IP address in
    the trap matches a known IP address in the database.</para>

    <para>If the IP Address is not known, OpenNMS will generate a newSuspect
    event to attempt to discover the device. This behavior can be disabled in
    the trapd-configuration.xml file.</para>

    <para>Added new trap definitions for Dell OpenManage, Foundry Networks and
    ADIC. Also added an updated mib2opennms program which improves the look of
    the output.</para>

    <bridgehead>Reports</bridgehead>

    <para>Added a new custom reporting module which allows one to create and
    save custom performance reports. It is called the Key SNMP Custom (KSC)
    Reporting Tool.</para>

    <para>Added buttons on the standard Performance and Response Time pages to
    allow the range to be changed between the last Day/Week/Month/Year.</para>

    <bridgehead>Response Time</bridgehead>

    <para>Added the ability to collect response time on the following pollers:
    Citrix, FTP, HTTPS, IMAP, POP3, SMTP and TCP.</para>

    <para>The RRAs for Response Time data are now part of the poller
    configuration file.</para>

    <bridgehead>Web Improvements</bridgehead>

    <para>There is now a Response Time link on the node and interface
    pages.</para>

    <para>If a node or interface supports HTTP, there is now a link to that
    service.</para>

    <para>Added a two minute refresh to the event listing page.</para>

    <bridgehead>Other Features</bridgehead>

    <para>Added non-blocking I/O to the HTTPS service. Now all monitors and
    plug-ins should be non-blocking.</para>

    <para>If you set the IP Address in a poll-outages calendar to "match-any"
    it will match all addresses in the poller package that uses that
    calendar.</para>

    <para>Increased the size of the contactinfo field in the usersnotified
    table, and changed create.sql to make this easier.</para>

    <bridgehead>Fixed Bugs</bridgehead>

    <para>Fixed numerous bugs, including 650 where "down" events could be
    written to the database after the corresponding "up" event. See the
    CHANGELOG for a full list.</para>

    <bridgehead>Tomcat4</bridgehead>

    <para>For a variety of reasons, OpenNMS 1.1.1 and beyond will require
    Tomcat4 version 4.1.18 or higher.</para>
  </section>

  <section id="chap2sect3">
    <title>Changes in OpenNMS 1.1.0 and Above</title>

    <para>There were many changes to OpenNMS between 1.0 and 1.1. Here are a
    few listed by functional area.</para>

    <bridgehead>Events and Event Handling</bridgehead>

    <para>The events and notifications part of OpenNMS saw the most changes
    with 1.1.0. First, there was a new tag added to the
    <filename>eventconf.xml</filename> file called &lt;event-file&gt;. This
    allows for external files to be included in the event
    configuration.</para>

    <para>Also, the order in which events appear is now strictly enforced.
    When trying to match an event with an event definition, OpenNMS takes the
    first match. The events in the <filename>eventconf.xml</filename> are read
    first, followed by the files identified by &lt;event-file&gt; tags (in the
    order in which they are listed). In the configuration that ships with
    OpenNMS, the file with the default events is loaded last. Be sure to add
    any custom files before that one.</para>

    <para>Prior to this release, the SNMP generic traps 0-5 (coldStart,
    warmStart, linkDown, etc.) were hard-coded. Now they must be defined (and
    that definition is included in the default events file), but this allows
    for generic traps other than type 6 to be configured differently for, say,
    different hosts.</para>

    <para>Speaking of event files, over 2750 events were added out of the box,
    including those from vendors such as Cisco, HP and 3Com. Please let us
    know if anything is misconfigured or if we need to add some events.</para>

    <para>The ability to configure events based on parameters (varbinds) was
    also added. This is best demonstrated with an example. In the new HP event
    definitions there is an event called hpicfFaultFinderTrap. It is defined
    as: <programlisting>&lt;event&gt; 
    &lt;mask&gt;
        &lt;maskelement&gt; 
            &lt;mename&gt;id&lt;/mename&gt;
            &lt;mevalue&gt;.1.3.6.1.4.1.11.2.14.12.1&lt;/mevalue&gt;
        &lt;/maskelement&gt; 
        &lt;maskelement&gt;
            &lt;mename&gt;generic&lt;/mename&gt;
            &lt;mevalue&gt;6&lt;/mevalue&gt; &lt;/maskelement&gt;
        &lt;maskelement&gt; 
            &lt;mename&gt;specific&lt;/mename&gt;
            &lt;mevalue&gt;5&lt;/mevalue&gt; 
        &lt;/maskelement&gt;
    &lt;/mask&gt;
    &lt;uei&gt;uei.opennms.org/vendor/HP/traps/hpicfFaultFinderTrap&lt;/uei&gt;
    &lt;event-label&gt;HP-ICF-FAULT-FINDER-MIB defined trap event: hpicfFaultFinderTrap&lt;/event-label&gt; 
    &lt;descr&gt;
      &lt;p&gt;This notification is sent whenever the Fault Finder creates
      an entry in the hpicfFfLogTable.&lt;/p&gt; 
      &lt;table&gt;
          &lt;tr&gt; 
          &lt;td&gt;&lt;b&gt;hpicfFfLogFaultType&lt;/b&gt;&lt;/td&gt; 
          &lt;td&gt;%parm[#1]%&lt;/td&gt; 
          &lt;td&gt;&lt;p&gt; badDriver(1) badXcvr(2)
              badCable(3) tooLongCable(4) overBandwidth(5) bcastStorm(6) partition(7)
              misconfiguredSQE(8) polarityReversal(9) networkLoop(10) lossOfLink(11)
              portSecurityViolation(12) backupLinkTransition(13) meshingFault(14)
              fanFault(15) rpsFault(16) stuck10MbFault(17) lossOfStackMember(18)
              hotSwapReboot(19) &lt;/p&gt;&lt;/td&gt; 
          &lt;/tr&gt; 
          &lt;tr&gt;
          &lt;td&gt;&lt;b&gt; hpicfFfLogAction&lt;/b&gt;&lt;/td&gt;
          &lt;td&gt;%parm[#2]% &lt;/td&gt; 
          &lt;td&gt;&lt;p;&gt; none(1)
              warn(2) warnAndDisable(3) warnAndSpeedReduce(4)
              warnAndSpeedReduceAndDisable(5) &lt;/p&gt;&lt;/td;&gt; 
          &lt;/tr&gt;
          &lt;tr&gt; 
          &lt;td&gt;&lt;b&gt;hpicfFfLogSeverity&lt;/b&gt;&lt;/td&gt; 
          &lt;td&gt;%parm[#3]%&lt;/td&gt; 
          &lt;td&gt;&lt;p&gt; informational(1) medium(2)
              critical(3) &lt;/p&gt;&lt;/td;&gt; 
          &lt;/tr&gt; 
          &lt;tr&gt;
          &lt;td&gt;&lt;b&gt; hpicfFfFaultInfoURL&lt;/b&gt;&lt;/td&gt;
          &lt;td&gt;%parm[#4]%&lt;/td&gt;
          &lt;td&gt;&lt;p;&gt;&lt;/p&gt;&lt;/td;&gt;
          &lt;/tr&gt; 
       &lt;/table&gt; 
    &lt;/descr&gt; 
    &lt;logmsg dest='logndisplay'&gt;&lt;p&gt;HP Event: ICF Hub Fault Found.&lt;/p&gt;&lt;/logmsg&gt;
    &lt;severity&gt;Warning&lt;/severity&gt; 
&lt;/event&gt;
      </programlisting></para>

    <para>Note that the third parameter denotes the severity of the event. By
    default this event has a severity of Warning, but what if it was desired
    to make the "critical" event a severity of Major? Using the new varbind
    extension to the mask tag: <programlisting>&lt;event&gt; 
    &lt;mask&gt; 
        &lt;maskelement&gt;
            &lt;mename&gt;id&lt;/mename&gt;
            &lt;mevalue&gt;.1.3.6.1.4.1.11.2.14.12.1&lt;/mevalue&gt;
        &lt;/maskelement&gt; &lt;maskelement&gt;
            &lt;mename&gt;generic&lt;/mename&gt;
            &lt;mevalue&gt;6&lt;/mevalue&gt; 
        &lt;/maskelement&gt;
        &lt;maskelement&gt; &lt;mename&gt;specific&lt;/mename&gt;
            &lt;mevalue&gt;5&lt;/mevalue&gt; 
        &lt;/maskelement&gt;
        &lt;varbind&gt; 
            &lt;vbnumber&gt;specific&lt;/vbnumber&gt;
            &lt;vbvalue&gt;5&lt;/vbvalue&gt; 
        &lt;/varbind&gt; 
    &lt;/mask&gt;
    &lt;uei&gt;uei.opennms.org/vendor/HP/traps/hpicfFaultFinderTrap&lt;/uei&gt;
    &lt;event-label&gt;HP-ICF-FAULT-FINDER-MIB defined trap event: hpicfFaultFinderTrap&lt;/event-label&gt;
    &lt;descr&gt;
        &lt;p&gt;This notification is sent whenever the Fault
           Finder creates an entry in the
           hpicfFfLogTable.&lt;/p&gt;
        &lt;table&gt;
            &lt;tr&gt;
            &lt;td&gt;&lt;b&gt;hpicfFfLogFaultType&lt;/b&gt;&lt;/td&gt;
            &lt;td&gt;%parm[#1]%&lt;/td&gt;
            &lt;td&gt;&lt;p&gt; badDriver(1) badXcvr(2)
                badCable(3) tooLongCable(4) overBandwidth(5) bcastStorm(6) partition(7)
                misconfiguredSQE(8) polarityReversal(9) networkLoop(10) lossOfLink(11)
                portSecurityViolation(12) backupLinkTransition(13) meshingFault(14)
                fanFault(15) rpsFault(16) stuck10MbFault(17) lossOfStackMember(18)
                hotSwapReboot(19)&lt;/p&gt;&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
            &lt;td&gt;&lt;b&gt;hpicfFfLogAction&lt;/b&gt;&lt;/td&gt;
            &lt;td&gt;%parm[#2]%&lt;/td&gt;
            &lt;td&gt;&lt;p&gt; none(1) warn(2) warnAndDisable(3)
                warnAndSpeedReduce(4) warnAndSpeedReduceAndDisable(5)&lt;/p&gt;&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
            &lt;td&gt;&lt;b&gt;hpicfFfLogSeverity&lt;/b&gt;&lt;/td&gt;
            &lt;td&gt;%parm[#3]%&lt;/td&gt;
            &lt;td&gt;&lt;p;&gt; informational(1) medium(2)
                critical(3)&lt;/p&gt;&lt;/td;&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
            &lt;td&gt;&lt;b&gt;hpicfFfFaultInfoURL&lt;/b&gt;&lt;/td&gt;
            &lt;td&gt;%parm[#4]%&lt;/td&gt;
            &lt;td&gt;&lt;p;&gt;&lt;/p&gt;&lt;/td;&gt;
            &lt;/tr&gt;
        &lt;/table&gt;
    &lt;/descr&gt; 
    &lt;logmsg dest='logndisplay'&gt;&lt;p&gt;HP Event: ICF Hub Fault Found.&lt;/p&gt;&lt;/logmsg&gt;
    &lt;severity&gt;Major&lt;/severity&gt; &lt;/event&gt;
      </programlisting></para>

    <para>This event, when added before the previous event since it is more
    specific, will try to match on the enterprise id, the generic trap value
    of 6, the specific trap value of 5 <emphasis>and</emphasis> the value of
    the third parameter, or varbind, of 3.</para>

    <para>There was also the addition of a low and high threshold rearm
    events. When a threshold is exceeded in consecutive polls equal to the
    trigger number, the threshold event is generated. Another event will not
    be generated until the polled value drops below the rearm number. The
    rearm event is thus similar to a "cleared" event. Since the first
    parameter passed with the threshold event is the data source name, using
    the "varbind" tag above, each data source can now have its own
    event.</para>

    <para>One of the more noticeable changes is that the Unique Event
    Identifier no longer contains "http://". The original intent was that the
    UEI would act something like an XML namespace, but in practice it is just
    a label, so the "http://" was removed to avoid confusion.</para>

    <para>Notifications also received some attention with this release. Due to
    popular demand, the tags %nodelabel% and %interfaceresolve% are now
    available. The former will display the label of the nodeid associated with
    the event, and the latter will attempt to resolve the name associated with
    the IP Address of the interface of the event.</para>

    <para>In <filename>notifd-configuration.xml</filename> there are now two
    new attributes. In the global properties, there is "match-all". By
    default, this is set to false, which means that the first notification
    that matches an event will be the only notification sent. If it is set to
    true, then all notifications that match a given event will be sent.
    (Thanks Nick) In the auto-acknowledge section, there is a new attribute
    called "clear". By adding "clear=true" to the auto-acknowledge tag, both
    the event being auto acknowledged <emphasis>and</emphasis> the event that
    caused the acknowledgement will be acknowledged. Thus the "up" event that
    clears a "down" will also be cleared.</para>

    <para>In addition to these enhancements, various bugs were fixed.
    Notification rules now actually work, and you can filter node level events
    via IP address. Also, threshold events can now generate
    notifications.</para>

    <bridgehead>Polling</bridgehead>

    <para>The biggest change to polling would have to be the addition of
    response time information for DHCP, DNS, HTTP and ICMP based pollers.
    Similar to data collection, the response time information can be graphed
    and it can have threshold alarms placed on it.</para>

    <para>Also, all of the plugins and monitors (except HTTPS) have been
    re-written to use the non-blocking I/O available in the 1.4 JDK.</para>

    <bridgehead>Discovery</bridgehead>

    <para>There has been some discussion on how OpenNMS determines node
    labels. Currently, this is set to the resolved SNMP Primary Interface IP
    Address. However, it is common practice on routers to have a
    software-loopback address. OpenNMS will now discover such interfaces (as
    long as they do not have an address that starts with 127) and mark them as
    the primary SNMP Interface. Note that no services will be polled on such
    interfaces.</para>

    <bridgehead>The Web User Interface</bridgehead>

    <para>A few changes were made to the WebUI. There is now a
    webui-colors.xml file that will allow for dynamic changes to the
    background colors used in the categories list on the main page (more pages
    to follow). Also under "Admin" the ability to delete nodes was
    added.</para>

    <para>In addition, there is a new Admin page that will allow one to choose
    which non-IP interfaces will be used in data collection. By setting the
    snmpStorageFlag in <filename>datacollection-config.xml</filename> to
    "select" (now the default), OpenNMS will only store data from those
    interfaces that could serve as a primary SNMP interface. One can then
    select which other interfaces to collect on using the GUI. The previous
    values of snmpStorageFlag ("primary" and "all") still work.</para>

    <para>Also, the "Destination Path" interface now has the ability to choose
    NOT to include a service (thanks Nick) which will create a rule like
    "match the events where service is NOT FTP", and by placing the mouse over
    the categories on the main page, the last time the category was updated
    should be displayed.</para>

    <bridgehead>Fixed Service Deletion in Downtime Model</bridgehead>

    <para>The poller downtime model allows for a service to be deleted if it
    has been down for a certain amount of time. This did not work correctly
    and has been fixed.</para>

    <bridgehead>Reduced the Amount of Data Initially Collected from the
    ifTable</bridgehead>

    <para>During discovery, the ifTable is collected from each device that is
    found to support SNMP. On some HP switches, this would fail due to a
    limitation on the SNMP maximum packet size. All non-essential ifTable
    elements were removed from the request that appears to resolve the
    problem.</para>

    <bridgehead>Removed Spaces in Notification Path Names</bridgehead>

    <para>Spaces in Notification Path names have been known to cause problems.
    The Web UI was modified to disallow spaces in path names. Bug 657.</para>

    <bridgehead>Fixed the AM/PM Ordering on Performance Report
    UI.</bridgehead>

    <para>In the Custom Performance Report Web UI, 11 PM was followed by 12
    PM, when it should have been 12 AM. This has been corrected. Bug
    515.</para>

    <bridgehead>Added a "contrib" Directory</bridgehead>

    <para>The "contrib" directory now contains code, such as nifty utilities,
    that exists outside of the main OpenNMS source but may prove useful. One
    such example is Tomas Carlsson's "mib2opennms" program. These programs are
    not supported.</para>

    <bridgehead>Removed Duplicate Entries in
    <filename>capsd-configuration.xml</filename></bridgehead>

    <para>Both LDAP and Citrix protocol plug-ins were listed twice. This would
    slow down the capabilities scan considerably.</para>

    <bridgehead>Updated Data Collection and Graphing</bridgehead>

    <para>Added new entries to <filename>datacollection-config.xml</filename>
    and <filename>snmp-graph.properties</filename>.</para>

    <bridgehead>Bugfixes</bridgehead>

    <para>Many bugfixes, including allowing Threshold events to generate
    notifications, AdminStatus and OperStatus values causing exceptions, and
    rescans with certain devices.</para>
  </section>

  <section id="chap2sect4">
    <title>Changes in OpenNMS 1.0.0 and Above</title>

    <para>The following major changes occurred between 0.9.9 and 1.0.0:</para>

    <bridgehead>"OpenSSH" service is now "SSH"</bridgehead>

    <para>The OpenSSH service has been renamed to "SSH" and changed to detect
    common versions of SSH servers other than OpenSSH. Upgrades will retain
    the "OpenSSH" service as well for the sake of reports.</para>

    <bridgehead>"Service Unresponsive" support</bridgehead>

    <para>There is now the possibility of having a state between "up" and
    "down" that flags a service as being unresponsive. This state can be
    reached when the service's port can be connected to, but it does not
    respond in a reasonable amount of time.</para>

    <bridgehead>Bugfixes</bridgehead>

    <para>Many small bugfixes, including the "Calculating..." problem if RTC
    has not come up yet when tomcat starts.</para>
  </section>
</chapter>
